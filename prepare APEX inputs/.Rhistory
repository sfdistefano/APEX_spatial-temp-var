geom_bar(position="stack", stat="identity", width = 0.5) +
ylab("Herbaceous Plant Population (Basal Area %)") +
xlab("Pasture") +
# ylim(0, 30) +
theme_bw() +
theme(text = element_text(size = 15, family = 'serif'),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text.y = element_text(size = 12.5))+
scale_fill_npg(name = "Functional Group") +
facet_grid(Pasture~Ecosite, space = "free_x") +
force_panelsizes(rows = 5, cols = 20, TRUE)
ggplot(PlantPop_pasture_spat, aes(fill = CPNM, y = plantPop, x = CPNM)) +
geom_bar(position="stack", stat="identity", width = 0.5) +
ylab("Herbaceous Plant Population (Basal Area %)") +
xlab("Pasture") +
# ylim(0, 30) +
theme_bw() +
theme(text = element_text(size = 15, family = 'serif'),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text.y = element_text(size = 10, family = 'serif'))+
scale_fill_npg(name = "Functional Group") +
facet_grid(Pasture~Ecosite, space = "free_x") +
force_panelsizes(rows = 5, cols = 20, TRUE)
ggplot(PlantPop_pasture_spat, aes(fill = CPNM, y = plantPop, x = CPNM)) +
geom_bar(position="stack", stat="identity", width = 0.5) +
ylab("Herbaceous Plant Population (Basal Area %)") +
xlab("Pasture") +
# ylim(0, 30) +
theme_bw() +
theme(text = element_text(size = 15, family = 'serif'),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text.y = element_text(size = 12, family = 'serif'))+
scale_fill_npg(name = "Functional Group") +
facet_grid(Pasture~Ecosite, space = "free_x") +
force_panelsizes(rows = 5, cols = 20, TRUE)
PlantPop_pasture_spat <- merge(PlantPop_spat, PastureID_sa92, by = c("ID", "Treatment")) %>%
group_by(Pasture, Ecosite, CPNM) %>%
summarize(plantPop = mean(POP))  %>%
mutate(sim.type = "Spatial Variability")
PlantPop_pasture_spat$CPNM <- gsub(PlantPop_yr_spat$CPNM, pattern = "FRB3", replacement = "FORB")
PlantPop_pasture_spat <- merge(PlantPop_spat, PastureID_sa92, by = c("ID", "Treatment")) %>%
group_by(Pasture, Ecosite, CPNM) %>%
summarize(plantPop = mean(POP))  %>%
mutate(sim.type = "Spatial Variability")
PlantPop_pasture_spat$CPNM <- gsub(PlantPop_pasture_spat$CPNM, pattern = "FRB3", replacement = "FORB")
PlantPop_pasture_spat$CPNM <- gsub(PlantPop_pasture_spat$CPNM, pattern = "VUOC", replacement = "CSAG")
ggplot(PlantPop_pasture_spat, aes(fill = CPNM, y = plantPop, x = CPNM)) +
geom_bar(position="stack", stat="identity", width = 0.5) +
ylab("Herbaceous Plant Population (Basal Area %)") +
xlab("Pasture") +
# ylim(0, 30) +
theme_bw() +
theme(text = element_text(size = 15, family = 'serif'),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text.y = element_text(size = 12, family = 'serif'))+
scale_fill_npg(name = "Functional Group") +
facet_grid(Pasture~Ecosite, space = "free_x") +
force_panelsizes(rows = 5, cols = 20, TRUE)
ggplot(PlantPop_pasture_base, aes(fill = CPNM, y = plantPop, x = CPNM)) +
geom_bar(position="stack", stat="identity") +
ylab("Herbaceous Plant Population (Basal Area %)") +
xlab("Pasture") +
# ylim(0, 30) +
theme_bw() +
theme(text = element_text(size = 15, family = 'serif')) +
scale_fill_npg(name = "Functional Group") +
facet_grid(~ Pasture)
ggplot(PlantPop_pasture_base, aes(fill = CPNM, y = plantPop, x = CPNM)) +
geom_bar(position="stack", stat="identity") +
ylab("Herbaceous Plant Population (Basal Area %)") +
xlab("Pasture") +
# ylim(0, 30) +
theme_bw() +
theme(text = element_text(size = 15, family = 'serif')) +
scale_fill_npg(name = "Functional Group") +
facet_grid(Pasture~)
ggplot(PlantPop_pasture_base, aes(fill = CPNM, y = plantPop, x = CPNM)) +
geom_bar(position="stack", stat="identity") +
ylab("Herbaceous Plant Population (Basal Area %)") +
xlab("Pasture") +
# ylim(0, 30) +
theme_bw() +
theme(text = element_text(size = 15, family = 'serif')) +
scale_fill_npg(name = "Functional Group") +
facet_grid(Pasture~.)
PlantPop_pasture_base$CPNM <- gsub(PlantPop_pasture_base$CPNM, pattern = "FRB3", replacement = "FORB")
PlantPop_pasture_base$CPNM <- gsub(PlantPop_pasture_base$CPNM, pattern = "VUOC", replacement = "CSAG")
ggplot(PlantPop_pasture_base, aes(fill = CPNM, y = plantPop, x = CPNM)) +
geom_bar(position="stack", stat="identity") +
ylab("Herbaceous Plant Population (Basal Area %)") +
xlab("Pasture") +
# ylim(0, 30) +
theme_bw() +
theme(text = element_text(size = 15, family = 'serif')) +
scale_fill_npg(name = "Functional Group") +
facet_grid(Pasture~.)
ggplot(PlantPop_pasture_spat, aes(fill = CPNM, y = plantPop, x = CPNM)) +
geom_bar(position="stack", stat="identity", width = 0.5) +
ylab("Herbaceous Plant Population (Basal Area %)") +
xlab("Pasture") +
# ylim(0, 30) +
theme_bw() +
theme(text = element_text(size = 15, family = 'serif'),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text.y = element_text(size = 12, family = 'serif'),
legend.position="none") +
scale_fill_npg(name = "Functional Group") +
facet_grid(Pasture~Ecosite, space = "free_x") +
force_panelsizes(rows = 5, cols = 20, TRUE)
ggplot(PlantPop_pasture_spat, aes(fill = CPNM, y = plantPop, x = CPNM)) +
geom_bar(position="stack", stat="identity", width = 0.5) +
ylab("Herbaceous Plant Population (Basal Area %)") +
xlab("Pasture") +
# ylim(0, 30) +
theme_bw() +
theme(text = element_text(size = 15, family = 'serif'),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text.y = element_text(size = 12, family = 'serif'),
legend.position="none") +
scale_fill_npg(name = "Functional Group") +
facet_grid(Pasture~Ecosite, space = "free_x") +
force_panelsizes(rows = 10, cols = 20, TRUE)
ggplot(PlantPop_pasture_base, aes(fill = CPNM, y = plantPop, x = CPNM)) +
geom_bar(position="stack", stat="identity") +
ylab("Herbaceous Plant Population (Basal Area %)") +
xlab("Pasture") +
# ylim(0, 30) +
theme_bw() +
theme(text = element_text(size = 15, family = 'serif'),
legend.position="none") +
scale_fill_npg(name = "Functional Group") +
facet_grid(Pasture~.)
ggplot(PlantPop_pasture_base, aes(fill = CPNM, y = plantPop, x = CPNM)) +
geom_bar(position="stack", stat="identity") +
ylab("Herbaceous Plant Population (Basal Area %)") +
xlab("Pasture") +
# ylim(0, 30) +
theme_bw() +
theme(text = element_text(size = 15, family = 'serif'),
legend.position="none") +
scale_fill_npg(name = "Functional Group") +
facet_grid(Pasture~.) +
force_panelsizes(cols = 20, TRUE)
ggplot(PlantPop_pasture_base, aes(fill = CPNM, y = plantPop, x = CPNM)) +
geom_bar(position="stack", stat="identity") +
ylab("Herbaceous Plant Population (Basal Area %)") +
xlab("Pasture") +
# ylim(0, 30) +
theme_bw() +
theme(text = element_text(size = 15, family = 'serif'),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position="none") +
scale_fill_npg(name = "Functional Group") +
facet_grid(Pasture~.)
library(tidyverse)
setwd("D:/APEX data and scripts/")
# Import pasture reference information
pastureID <- read.csv("Data/PastureID_ecosite_20subareas.csv") %>%
# Converting pasture name to match CARM name
mutate(Pasture = gsub("10S", "NH", Pasture)) %>%
# Removing unnecessary column
select(-Block)
# Import CARM rotation and stocking density data
cattle.data <- read.csv("Data/CPER Cattle/CARM_ActualGrazingInfov4_2013-2023.csv") %>%
# Removing unnecessary columns
select(PastureCode, Year, Rest, NumSteers, RotationOrder,
DateInPasture, DateOutPasture, split_herd)
# Add pasture information & remove pastures that aren't in CARM
cattle.data_merge <- cattle.data %>%
merge(pastureID, by.x = "PastureCode", by.y = "Pasture") %>%
# Calculate ha/animal (input for APEX OPC)
mutate(ha_anim = round((PastureSize_ha / NumSteers), 2))
## Export data
write.csv(cattle.data_merge,"APEX inputs/stocking rate_APEXinputs_2012-2023.csv")
source("~/GitHub/APEX_spatial-temp-var/prepare APEX inputs/plant population_APEX1605.R", echo=TRUE)
View(basal.area_plot)
opc.input_basal <- merge(basal.area_plot, PastureID,
by = c("Pasture", "Treatment","Ecosite",
"Plot", "Block"),
all.x = TRUE)
View(opc.input_basal)
# adding info
opc.input_basal <- merge(basal.area_plot, PastureID,
by = c("Pasture", "Treatment","Ecosite",
"Plot", "Block"),
all.x = TRUE) %>%
group_by(ID, Treatment, apex.code) %>%
summarize(apex.input = round(mean(meanBasalcoverFG), 2))
## Code written by Dr. Sean Di Stefano in 4/2024 for the Central Plains Experimental Range, Nunn, CO
library(tidyverse)
setwd("C:/APEX data and scripts/Data")
###### SUMMARIZING DATA BY PLOT (92 subareas) ##################################
PastureID_sa92 <- read.csv("C:/APEX data and scripts/Data/PastureID_ecosite_92subareas.csv")
##### BASAL AREA ###############################################################
basal.area <- read.csv("C:/APEX data and scripts/Data/CPER Plant Pop/BasalCover_FuncGrpByTransect_CARM_wide2013-2023.csv") %>%
pivot_longer(cols = BARE:WSPG,
names_to = "FunctionalGroupCode",
values_to = "meanBasalcoverFG") %>%
mutate(Treatment = ifelse(Treatment == "AGM", "CARM", "TRM")) # renaming grazing treatment
# renaming NH to 10S
basal.area$Pasture <- gsub(pattern = "NH", replacement = "10S",
x = basal.area$Pasture)
# adding APEX code
apex.code <- c(300,301,310,321,330,340,351) # functional group code in APEX from CROP.DAT
apex.FG <- c("WSPG", "BOBU", "CSPG", "CSAG", "FORB", "SS", "ATCA") # functional group name
APEX.codes <- data.frame(apex.code, apex.FG)
basal.area_plot <- merge(basal.area, APEX.codes,
by.x = "FunctionalGroupCode",
by.y = "apex.FG",
all.x = TRUE) %>%
filter(Year %in% c(2014:2018),
!(is.na(apex.code)))
# adding info and summarizing data by Pasture * Plot * Plant Functional Group
opc.input_basal <- merge(basal.area_plot, PastureID_sa92,
by = c("Pasture", "Treatment","Ecosite",
"Plot", "Block"),
all.x = TRUE) %>%
group_by(Pasture, Plot, ID, Treatment, apex.code) %>%
summarize(apex.input = round(mean(meanBasalcoverFG), 2)) %>%
# Add a new group with apex.code 300 to combine 300 and 301 (both warm-season perennial grasses [WSPG])
mutate(apex.code = ifelse(apex.code %in% c(300, 301), 300, apex.code)) %>%
group_by(Pasture, Plot, ID, Treatment, apex.code) %>%
summarize(apex.input = sum(apex.input)) %>%
ungroup()
##### SHRUB DENSITY ############################################################
shrub.density <- read.csv("C:/APEX data and scripts/Data/CPER Plant Pop/CARM_shrDensities2013_2023_cln_attr2023-12-28.CSV") %>%
dplyr::rename(Pasture = PASTURE, Plot = PLOT) %>%
dplyr::filter(!(Plot %in% c(5:6) & Pasture %in% c("18S", "19N"))) %>% # removing burned plots
pivot_longer(cols = c(ARFR:KRLA), # shrub functional groups
names_to = "CPNM", values_to = "density")
# renaming NH to 10S (NH is the stakeholder name for 10S)
shrub.density$Pasture <- gsub(pattern = "NH", replacement = "10S",
x = shrub.density$Pasture)
## summarizing data to plot
shrub.summ_plot <- shrub.density %>%
group_by(YEAR, Pasture, Plot, Ecosite, CPNM) %>%
summarize(density = round(mean(density), 2)) %>%
filter(YEAR %in% c(2014:2018))
# calculating average density for CPNM = "SS" by YEAR, Pasture, Ecosite, and Plot
summed_ss_density <- shrub.summ_plot %>%
filter(CPNM %in% c("ARFR", "EREF", "ERNA", "GUSA", "KRLA", "YUGL")) %>%
mutate(CPNM = "SS") %>% # creating a new category for summed SS
group_by(YEAR, Pasture, Plot, Ecosite, CPNM) %>%
summarize(density = round(sum(density), 2))
# separate ATCA rows for later combination
atca_density <- shrub.summ_plot %>%
filter(CPNM == "ATCA")
# combining both plant types to shrub.summ_plot (SS [sub-shrub] or ATCA [four-wing saltbush])
shrub.summ_plot <- bind_rows(summed_ss_density, atca_density)
## adding pastureID and APEX plant code,summarizing data by Pasture * Plant Functional Group
opc.input_shrub <- merge(shrub.summ_plot, PastureID_sa92,
by = c("Pasture", "Ecosite", "Plot"),
all.x = TRUE) %>%
merge(APEX.codes, by.x = "CPNM", by.y = "apex.FG", all.x = TRUE) %>%
group_by(Pasture, Plot, ID, Treatment, apex.code) %>%
summarize(apex.input = round(mean(density), 2))
View(opc.input_shrub)
View(opc.input_basal)
View(basal.area_plot)
# adding info and summarizing data by Pasture * Plot * Plant Functional Group
opc.input_basal <- merge(basal.area_plot, PastureID_sa92,
by = c("Pasture", "Treatment","Ecosite",
"Plot", "Block"),
all.x = TRUE) %>%
group_by(Pasture, Plot, ID, Treatment, apex.code) %>%
summarize(apex.input = round(mean(meanBasalcoverFG), 2)) %>%
# Add a new group with apex.code 300 to combine 300 and 301 (both warm-season perennial grasses [WSPG])
mutate(apex.code = ifelse(apex.code %in% c(300, 301), 300, apex.code)) %>%
group_by(Pasture, Plot, ID, Treatment, apex.code) %>%
summarize(apex.input = sum(apex.input)) %>%
filter(apex.code != 340) %>%
ungroup()
## Code written by Dr. Sean Di Stefano in 4/2024 for the Central Plains Experimental Range, Nunn, CO
library(tidyverse)
setwd("C:/APEX data and scripts/Data")
###### SUMMARIZING DATA BY PLOT (92 subareas) ##################################
PastureID_sa92 <- read.csv("C:/APEX data and scripts/Data/PastureID_ecosite_92subareas.csv")
##### BASAL AREA ###############################################################
basal.area <- read.csv("C:/APEX data and scripts/Data/CPER Plant Pop/BasalCover_FuncGrpByTransect_CARM_wide2013-2023.csv") %>%
pivot_longer(cols = BARE:WSPG,
names_to = "FunctionalGroupCode",
values_to = "meanBasalcoverFG") %>%
mutate(Treatment = ifelse(Treatment == "AGM", "CARM", "TRM")) # renaming grazing treatment
# renaming NH to 10S
basal.area$Pasture <- gsub(pattern = "NH", replacement = "10S",
x = basal.area$Pasture)
# adding APEX code
apex.code <- c(300,301,310,321,330,340,351) # functional group code in APEX from CROP.DAT
apex.FG <- c("WSPG", "BOBU", "CSPG", "CSAG", "FORB", "SS", "ATCA") # functional group name
APEX.codes <- data.frame(apex.code, apex.FG)
basal.area_plot <- merge(basal.area, APEX.codes,
by.x = "FunctionalGroupCode",
by.y = "apex.FG",
all.x = TRUE) %>%
filter(Year %in% c(2014:2018),
!(is.na(apex.code)))
# adding info and summarizing data by Pasture * Plot * Plant Functional Group
opc.input_basal <- merge(basal.area_plot, PastureID_sa92,
by = c("Pasture", "Treatment","Ecosite",
"Plot", "Block"),
all.x = TRUE) %>%
group_by(Pasture, Plot, ID, Treatment, apex.code) %>%
summarize(apex.input = round(mean(meanBasalcoverFG), 2)) %>%
# Add a new group with apex.code 300 to combine 300 and 301 (both warm-season perennial grasses [WSPG])
mutate(apex.code = ifelse(apex.code %in% c(300, 301), 300, apex.code)) %>%
group_by(Pasture, Plot, ID, Treatment, apex.code) %>%
summarize(apex.input = sum(apex.input)) %>%
filter(apex.code != 340) %>%
ungroup()
##### SHRUB DENSITY ############################################################
shrub.density <- read.csv("C:/APEX data and scripts/Data/CPER Plant Pop/CARM_shrDensities2013_2023_cln_attr2023-12-28.CSV") %>%
dplyr::rename(Pasture = PASTURE, Plot = PLOT) %>%
dplyr::filter(!(Plot %in% c(5:6) & Pasture %in% c("18S", "19N"))) %>% # removing burned plots
pivot_longer(cols = c(ARFR:KRLA), # shrub functional groups
names_to = "CPNM", values_to = "density")
# renaming NH to 10S (NH is the stakeholder name for 10S)
shrub.density$Pasture <- gsub(pattern = "NH", replacement = "10S",
x = shrub.density$Pasture)
## summarizing data to plot
shrub.summ_plot <- shrub.density %>%
group_by(YEAR, Pasture, Plot, Ecosite, CPNM) %>%
summarize(density = round(mean(density), 2)) %>%
filter(YEAR %in% c(2014:2018))
# calculating average density for CPNM = "SS" by YEAR, Pasture, Ecosite, and Plot
summed_ss_density <- shrub.summ_plot %>%
filter(CPNM %in% c("ARFR", "EREF", "ERNA", "GUSA", "KRLA", "YUGL")) %>%
mutate(CPNM = "SS") %>% # creating a new category for summed SS
group_by(YEAR, Pasture, Plot, Ecosite, CPNM) %>%
summarize(density = round(sum(density), 2))
# separate ATCA rows for later combination
atca_density <- shrub.summ_plot %>%
filter(CPNM == "ATCA")
# combining both plant types to shrub.summ_plot (SS [sub-shrub] or ATCA [four-wing saltbush])
shrub.summ_plot <- bind_rows(summed_ss_density, atca_density)
## adding pastureID and APEX plant code,summarizing data by Pasture * Plant Functional Group
opc.input_shrub <- merge(shrub.summ_plot, PastureID_sa92,
by = c("Pasture", "Ecosite", "Plot"),
all.x = TRUE) %>%
merge(APEX.codes, by.x = "CPNM", by.y = "apex.FG", all.x = TRUE) %>%
group_by(Pasture, Plot, ID, Treatment, apex.code) %>%
summarize(apex.input = round(mean(density), 2))
##### COMBINE & EXPORT DATA ####################################################
# combine both data types
plant.pop <- rbind(opc.input_basal,opc.input_shrub)
write.csv(plant.pop, "C:/APEX data and scripts/APEX inputs/input_OPC_subareas92_11022024.csv")
PastureID_sa92 <- read.csv("C:/APEX data and scripts/Data/PastureID_ecosite_92subareas.csv")
##### BASAL AREA ###############################################################
basal.area <- read.csv("C:/APEX data and scripts/Data/CPER Plant Pop/BasalCover_FuncGrpByTransect_CARM_wide2013-2023.csv") %>%
pivot_longer(cols = BARE:WSPG,
names_to = "FunctionalGroupCode",
values_to = "meanBasalcoverFG") %>%
mutate(Treatment = ifelse(Treatment == "AGM", "CARM", "TRM")) # renaming grazing treatment
# renaming NH to 10S
basal.area$Pasture <- gsub(pattern = "NH", replacement = "10S",
x = basal.area$Pasture)
# adding APEX code
apex.code <- c(300,301,310,321,330,340,351) # functional group code in APEX from CROP.DAT
apex.FG <- c("WSPG", "BOBU", "CSPG", "CSAG", "FORB", "SS", "ATCA") # functional group name
APEX.codes <- data.frame(apex.code, apex.FG)
basal.area_plot <- merge(basal.area, APEX.codes,
by.x = "FunctionalGroupCode",
by.y = "apex.FG",
all.x = TRUE) %>%
filter(Year %in% c(2014:2018),
!(is.na(apex.code)))
# adding reference info
canopy.input_basal <- merge(basal.area_plot, PastureID_sa92,
by = c("Pasture", "Treatment","Ecosite",
"Plot", "Block"),
all.x = TRUE) %>%
group_by(Year, Pasture, Plot, ID, Treatment, apex.code) %>%
summarize(apex.input = round(mean(meanBasalcoverFG), 2)) %>%
# Add a new group with apex.code 300 to combine 300 and 301 (both warm-season perennial grasses [WSPG])
mutate(apex.code = ifelse(apex.code %in% c(300, 301), 300, apex.code)) %>%
group_by(Treatment, Year, Pasture, ID, apex.code) %>%
summarize(apex.input = sum(apex.input)) %>%
filter(apex.code != 340) %>%
ungroup()
View(canopy.input_basal)
library(tidyverse)
library(rstatix)
###### SUMMARIZING DATA BY PLOT (92 subareas) ##################################
PastureID_sa92 <- read.csv("C:/APEX data and scripts/Data/PastureID_ecosite_92subareas.csv")
##### BASAL AREA ###############################################################
basal.area <- read.csv("C:/APEX data and scripts/Data/CPER Plant Pop/BasalCover_FuncGrpByTransect_CARM_wide2013-2023.csv") %>%
pivot_longer(cols = BARE:WSPG,
names_to = "FunctionalGroupCode",
values_to = "meanBasalcoverFG") %>%
mutate(Treatment = ifelse(Treatment == "AGM", "CARM", "TRM")) # renaming grazing treatment
# renaming NH to 10S
basal.area$Pasture <- gsub(pattern = "NH", replacement = "10S",
x = basal.area$Pasture)
# adding APEX code
apex.code <- c(300,301,310,321,330,340,351) # functional group code in APEX from CROP.DAT
apex.FG <- c("WSPG", "BOBU", "CSPG", "CSAG", "FORB", "SS", "ATCA") # functional group name
APEX.codes <- data.frame(apex.code, apex.FG)
basal.area_plot <- merge(basal.area, APEX.codes,
by.x = "FunctionalGroupCode",
by.y = "apex.FG",
all.x = TRUE) %>%
filter(Year %in% c(2014:2023),
!(is.na(apex.code)))
# adding reference info
canopy.input_basal <- merge(basal.area_plot, PastureID_sa92,
by = c("Pasture", "Treatment","Ecosite",
"Plot", "Block"),
all.x = TRUE) %>%
group_by(Year, Pasture, Plot, ID, Treatment, apex.code) %>%
summarize(apex.input = round(mean(meanBasalcoverFG), 2)) %>%
# Add a new group with apex.code 300 to combine 300 and 301 (both warm-season perennial grasses [WSPG])
mutate(apex.code = ifelse(apex.code %in% c(300, 301), 300, apex.code)) %>%
group_by(Treatment, Year, Pasture, ID, apex.code) %>%
summarize(apex.input = sum(apex.input)) %>%
filter(apex.code != 340) %>%
ungroup()
shrub.density <- read.csv("C:/APEX data and scripts/Data/CPER Plant Pop/CARM_shrDensities2013_2023_cln_attr2023-12-28.CSV") %>%
dplyr::rename(Pasture = PASTURE, Plot = PLOT) %>%
dplyr::filter(!(Plot %in% c(5:6) & Pasture %in% c("18S", "19N"))) %>% # removing burned plots
pivot_longer(cols = c(ARFR:KRLA), # shrub functional groups
names_to = "CPNM", values_to = "density")
# renaming NH to 10S (NH is the stakeholder name for 10S)
shrub.density$Pasture <- gsub(pattern = "NH", replacement = "10S",
x = shrub.density$Pasture)
## summarizing data to plot
shrub.summ_plot <- shrub.density %>%
group_by(YEAR, Pasture, Plot, Ecosite, CPNM) %>%
summarize(density = round(mean(density), 2)) %>%
filter(YEAR %in% c(2014:2023))
# calculating average density for CPNM = "SS" by YEAR, Pasture, Ecosite, and Plot
summed_ss_density <- shrub.summ_plot %>%
filter(CPNM %in% c("ARFR", "EREF", "ERNA", "GUSA", "KRLA", "YUGL")) %>%
mutate(CPNM = "SS") %>% # creating a new category for summed SS
group_by(YEAR, Pasture, Plot, Ecosite, CPNM) %>%
summarize(density = round(sum(density), 2))
# separate ATCA rows for later combination
atca_density <- shrub.summ_plot %>%
filter(CPNM == "ATCA")
# combining both plant types to shrub.summ_plot (SS [sub-shrub] or ATCA [four-wing saltbush])
shrub.summ_plot <- bind_rows(summed_ss_density, atca_density)
# adding pastureID and APEX plant code
canopy.input_shrub <- merge(shrub.summ_plot, PastureID_sa92,
by = c("Pasture", "Ecosite", "Plot"),
all.x = TRUE) %>%
merge(APEX.codes, by.x = "CPNM", by.y = "apex.FG", all.x = TRUE) %>%
rename(Year = YEAR) %>%
group_by(Treatment, Year, Pasture, ID, apex.code) %>%
summarize(apex.input = round(mean(density), 2))
View(canopy.input_shrub)
##### COMBINING OUTPUTS ########################################################
canopy.input <- rbind(canopy.input_basal, canopy.input_shrub) %>%
mutate(Month = 1, Day = 1) %>% # adding columns needed in CANOPY.DAT
relocate(c(Month, Day), .after = Year) %>% # ordering to match CANOPY.DAT
select(-Pasture)
View(canopy.input)
write.csv(canopy.input, "C:/APEX data and scripts/APEX inputs/input_CANOPY.DAT_subareas92_11022024.csv")
library(tidyverse)
###### SUMMARIZING DATA BY PLOT (92 subareas) ##################################
PastureID_sa92 <- read.csv("C:/APEX data and scripts/Data/PastureID_ecosite_92subareas.csv")
##### BASAL AREA ###############################################################
basal.area <- read.csv("C:/APEX data and scripts/Data/CPER Plant Pop/BasalCover_FuncGrpByTransect_CARM_wide2013-2023.csv") %>%
pivot_longer(cols = BARE:WSPG,
names_to = "FunctionalGroupCode",
values_to = "meanBasalcoverFG") %>%
mutate(Treatment = ifelse(Treatment == "AGM", "CARM", "TRM")) # renaming grazing treatment
# renaming NH to 10S
basal.area$Pasture <- gsub(pattern = "NH", replacement = "10S",
x = basal.area$Pasture)
# adding APEX code
apex.code <- c(300,301,310,321,330,340,351) # functional group code in APEX from CROP.DAT
apex.FG <- c("WSPG", "BOBU", "CSPG", "CSAG", "FORB", "SS", "ATCA") # functional group name
APEX.codes <- data.frame(apex.code, apex.FG)
basal.area_plot <- merge(basal.area, APEX.codes,
by.x = "FunctionalGroupCode",
by.y = "apex.FG",
all.x = TRUE) %>%
filter(Year %in% c(2014:2023),
!(is.na(apex.code)))
View(basal.area)
?round
##### BASAL AREA ###############################################################
basal.area <- read.csv("C:/APEX data and scripts/Data/CPER Plant Pop/BasalCover_FuncGrpByTransect_CARM_wide2013-2023.csv") %>%
pivot_longer(cols = BARE:WSPG,
names_to = "FunctionalGroupCode",
values_to = "meanBasalcoverFG") %>%
mutate(Treatment = ifelse(Treatment == "AGM", "CARM", "TRM")) # renaming grazing treatment
# renaming NH to 10S
basal.area$Pasture <- gsub(pattern = "NH", replacement = "10S",
x = basal.area$Pasture)
# adding APEX code
apex.code <- c(300,301,310,321,330,340,351) # functional group code in APEX from CROP.DAT
apex.FG <- c("WSPG", "BOBU", "CSPG", "CSAG", "FORB", "SS", "ATCA") # functional group name
APEX.codes <- data.frame(apex.code, apex.FG)
basal.area_plot <- merge(basal.area, APEX.codes,
by.x = "FunctionalGroupCode",
by.y = "apex.FG",
all.x = TRUE) %>%
filter(Year %in% c(2014:2023),
!(is.na(apex.code)))
# adding reference info
canopy.input_basal <- merge(basal.area_plot, PastureID_sa92,
by = c("Pasture", "Treatment","Ecosite",
"Plot", "Block"),
all.x = TRUE) %>%
group_by(Year, Pasture, Plot, ID, Treatment, apex.code) %>%
summarize(apex.input = round(mean(meanBasalcoverFG), 2)) %>%
# Add a new group with apex.code 300 to combine 300 and 301 (both warm-season perennial grasses [WSPG])
mutate(apex.code = ifelse(apex.code %in% c(300, 301), 300, apex.code)) %>%
group_by(Treatment, Year, Pasture, ID, apex.code) %>%
summarize(apex.input = sum(apex.input)) %>%
filter(apex.code != 340) %>%
ungroup()
View(canopy.input_basal)
