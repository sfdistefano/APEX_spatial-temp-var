# Filter for grazing treatment of interest (traditional grazing management)
tgm_weight_data_spatVar <- weight_data_spatVar[[1]]
weight_data_spatVar <- prepare_weight_data(direct = "C:/02-APEX1605_spatialtemp/APEX1605_CO_92 subareas_div",
simulation = "Spatial Variability")
# Filter for grazing treatment of interest (traditional grazing management)
tgm_weight_data_spatVar <- weight_data_spatVar[[1]]
View(tgm_weight_data_spatVar)
test <- tgm_dgz_filtered %>%
group_by(Date, Y) %>%
summarize(DWG = mean(DWG),
GZWT = mean(GZWT))
## Visualization of each grazing treatment
ggplot(test, aes(x = Date)) +
geom_smooth(aes(y = DWG), method = "gam") +
theme_bw() +
ylab("Daily Weight Gain (kg/hd/day)") +
facet_wrap(~Y, scales = "free_x") +
theme(text = element_text(size = 15, family = 'serif'))
prepare_weight_data <- function(direct, simulation) {
# Set working directory
setwd(direct)
# Read traditionally grazed pastures data
tgm_dgz <- data.table::fread("./Wt Gain Simulation/APEX1605_CO_TGM/CONUNN_TGM.DGZ",
fill = TRUE, skip = 9, header = TRUE) %>%
mutate(Date = lubridate::ymd(paste(Y,M,D, sep = "-")),
Simulation = simulation)  # Add simulation column
# Read rotationally (adaptively) grazed pastures data
agm_dgz <- data.table::fread("./Wt Gain Simulation/APEX1605_CO_AGM/CONUNN_TGM.DGZ",
fill = TRUE, skip = 9, header = TRUE) %>%
mutate(Date = lubridate::ymd(paste(Y,M,D, sep = "-")),
Simulation = simulation)  # Add simulation column
# Filter and summarize traditionally grazed pastures
tgm_dgz_filtered <- tgm_dgz %>%
filter(M %in% c(5:9), Y %in% c(2014:2018)) %>%
group_by(Date, Y) %>% # summarizing all TGM herds (n = 10) into 1 value/day
summarize(DWG = mean(`DWGkg/d`), GZWT = mean(GZWTkg), .groups = 'drop')
# Filter and summarize rotationally grazed pastures
agm_dgz_filtered <- agm_dgz %>%
filter(M %in% c(5:9), Y %in% c(2014:2018)) %>%
group_by(Date, Y) %>% # summarizing all AGM herds (n = 2) into 1 value/day
summarize(DWG = mean(`DWGkg/d`), GZWT = mean(GZWTkg), .groups = 'drop') %>%
mutate(herd.isa.month = paste(HERD, ISA, lubridate::month(Date), sep = "-"))
# Return filtered datasets as a list
return(list(tgm = tgm_dgz_filtered, agm = agm_dgz_filtered))
}
weight_data_spatVar <- prepare_weight_data(direct = "C:/02-APEX1605_spatialtemp/APEX1605_CO_92 subareas_div",
simulation = "Spatial Variability")
weight_data_spatTempVar <- prepare_weight_data(direct = "C:/02-APEX1605_spatialtemp/APEX1605_CO_92 subareas_div_dyn plant pop",
simulation = "Spatial + Temporal Variability")
prepare_weight_data <- function(direct, simulation) {
# Set working directory
setwd(direct)
# Read traditionally grazed pastures data
tgm_dgz <- data.table::fread("./Wt Gain Simulation/APEX1605_CO_TGM/CONUNN_TGM.DGZ",
fill = TRUE, skip = 9, header = TRUE) %>%
mutate(Date = lubridate::ymd(paste(Y,M,D, sep = "-")),
Simulation = simulation)  # Add simulation column
# Read rotationally (adaptively) grazed pastures data
agm_dgz <- data.table::fread("./Wt Gain Simulation/APEX1605_CO_AGM/CONUNN_TGM.DGZ",
fill = TRUE, skip = 9, header = TRUE) %>%
mutate(Date = lubridate::ymd(paste(Y,M,D, sep = "-")),
Simulation = simulation)  # Add simulation column
# Filter and summarize traditionally grazed pastures
tgm_dgz_filtered <- tgm_dgz %>%
filter(M %in% c(5:9), Y %in% c(2014:2018)) %>%
group_by(Date, Y) %>% # summarizing all TGM herds (n = 10) into 1 value/day
summarize(DWG = mean(`DWGkg/d`), GZWT = mean(GZWTkg), .groups = 'drop')
# Filter and summarize rotationally grazed pastures
agm_dgz_filtered <- agm_dgz %>%
filter(M %in% c(5:9), Y %in% c(2014:2018)) %>%
group_by(Date, Y) %>% # summarizing all AGM herds (n = 2) into 1 value/day
summarize(DWG = mean(`DWGkg/d`), GZWT = mean(GZWTkg), .groups = 'drop')
# Return filtered datasets as a list
return(list(tgm = tgm_dgz_filtered, agm = agm_dgz_filtered))
}
weight_data_spatVar <- prepare_weight_data(direct = "C:/02-APEX1605_spatialtemp/APEX1605_CO_92 subareas_div",
simulation = "Spatial Variability")
weight_data_spatTempVar <- prepare_weight_data(direct = "C:/02-APEX1605_spatialtemp/APEX1605_CO_92 subareas_div_dyn plant pop",
simulation = "Spatial + Temporal Variability")
# Filter for grazing treatment of interest (traditional grazing management)
tgm_weight_data_spatVar <- weight_data_spatVar[[1]]
tgm_weight_data_spatTempVar <- weight_data_spatTempVar[[1]]
prepare_weight_data <- function(direct, simulation) {
# Set working directory
setwd(direct)
# Read traditionally grazed pastures data
tgm_dgz <- data.table::fread("./Wt Gain Simulation/APEX1605_CO_TGM/CONUNN_TGM.DGZ",
fill = TRUE, skip = 9, header = TRUE) %>%
mutate(Date = lubridate::ymd(paste(Y,M,D, sep = "-")))  # Add simulation column
# Read rotationally (adaptively) grazed pastures data
agm_dgz <- data.table::fread("./Wt Gain Simulation/APEX1605_CO_AGM/CONUNN_TGM.DGZ",
fill = TRUE, skip = 9, header = TRUE) %>%
mutate(Date = lubridate::ymd(paste(Y,M,D, sep = "-")))  # Add simulation column
# Filter and summarize traditionally grazed pastures
tgm_dgz_filtered <- tgm_dgz %>%
filter(M %in% c(5:9), Y %in% c(2014:2018)) %>%
group_by(Date, Y) %>% # summarizing all TGM herds (n = 10) into 1 value/day
summarize(DWG = mean(`DWGkg/d`), GZWT = mean(GZWTkg), .groups = 'drop') %>%
mutate(Simulation = simulation)
# Filter and summarize rotationally grazed pastures
agm_dgz_filtered <- agm_dgz %>%
filter(M %in% c(5:9), Y %in% c(2014:2018)) %>%
group_by(Date, Y) %>% # summarizing all AGM herds (n = 2) into 1 value/day
summarize(DWG = mean(`DWGkg/d`), GZWT = mean(GZWTkg), .groups = 'drop') %>%
mutate(Simulation = simulation)
# Return filtered datasets as a list
return(list(tgm = tgm_dgz_filtered, agm = agm_dgz_filtered))
}
weight_data_spatVar <- prepare_weight_data(direct = "C:/02-APEX1605_spatialtemp/APEX1605_CO_92 subareas_div",
simulation = "Spatial Variability")
weight_data_spatTempVar <- prepare_weight_data(direct = "C:/02-APEX1605_spatialtemp/APEX1605_CO_92 subareas_div_dyn plant pop",
simulation = "Spatial + Temporal Variability")
# Filter for grazing treatment of interest (traditional grazing management)
tgm_weight_data_spatVar <- weight_data_spatVar[[1]]
tgm_weight_data_spatTempVar <- weight_data_spatTempVar[[1]]
# Combining TGM weight data in preparation for visualization of simulation differences
tgm_weight_data <- rbind(tgm_weight_data_spatVar, tgm_weight_data_spatTempVar)
View(tgm_weight_data)
# Daily Weight Gain
ggplot(test, aes(x = Date)) +
geom_smooth(aes(y = DWG, group = Simulation), method = "gam") +
theme_bw() +
ylab("Daily Weight Gain (kg/hd/day)") +
facet_wrap(~Y, scales = "free_x") +
theme(text = element_text(size = 15, family = 'serif'))
# Daily Weight Gain
ggplot(tgm_weight_data, aes(x = Date)) +
geom_smooth(aes(y = DWG, group = Simulation), method = "gam") +
theme_bw() +
ylab("Daily Weight Gain (kg/hd/day)") +
facet_wrap(~Y, scales = "free_x") +
theme(text = element_text(size = 15, family = 'serif'))
# Daily Weight Gain
ggplot(tgm_weight_data, aes(x = Date)) +
geom_smooth(aes(y = DWG, color = Simulation), method = "gam") +
theme_bw() +
ylab("Daily Weight Gain (kg/hd/day)") +
facet_wrap(~Y, scales = "free_x") +
theme(text = element_text(size = 15, family = 'serif'))
# Daily Animal Weight
ggplot(tgm_weight_data, aes(x = Date)) +
geom_line(aes(y = GZWT, color = Simulation), linewidth = 0.75) +
theme_bw() +
ylab("Daily Animal Weight (kg/hd/day)") +
facet_wrap(~Y, scales = "free_x") +
theme(text = element_text(size = 15, family = 'serif'))
# Read baseline simulation's pastures data
dgz <- data.table::fread(file.path(path, "./Wt Gain Simulation/CONUNN_TGM.DGZ"),
fill = TRUE, skip = 9, header = TRUE) %>%
mutate(Date = lubridate::ymd(paste(Y,M,D, sep = "-")))  # Add simulation column
path <- "C:/01-APEX1605_CO_baseline/Cage Biomass Simulation/APEX1605_CO_all20_cagebm"
# Read baseline simulation's pastures data
dgz <- data.table::fread(file.path(path, "./Wt Gain Simulation/CONUNN_TGM.DGZ"),
fill = TRUE, skip = 9, header = TRUE) %>%
mutate(Date = lubridate::ymd(paste(Y,M,D, sep = "-")))  # Add simulation column
path <- "C:/01-APEX1605_CO_baseline/Cage Biomass Simulation/APEX1605_CO_all20"
# Read baseline simulation's pastures data
dgz <- data.table::fread(file.path(path, "./Wt Gain Simulation/CONUNN_TGM.DGZ"),
fill = TRUE, skip = 9, header = TRUE) %>%
mutate(Date = lubridate::ymd(paste(Y,M,D, sep = "-")))  # Add simulation column
path <- "C:/01-APEX1605_CO_baseline"
# Read baseline simulation's pastures data
dgz <- data.table::fread(file.path(path, "./Wt Gain Simulation/APEX1605_CO_all20/CONUNN_TGM.DGZ"),
fill = TRUE, skip = 9, header = TRUE) %>%
mutate(Date = lubridate::ymd(paste(Y,M,D, sep = "-")))  # Add simulation column
View(dgz)
# Read baseline simulation's pastures data
dgz <- data.table::fread(file.path(path, "./Wt Gain Simulation/APEX1605_CO_all20/CONUNN_TGM.DGZ"),
fill = TRUE, skip = 9, header = TRUE) %>%
mutate(Date = lubridate::ymd(paste(Y,M,D, sep = "-")),
Treatment = ifelse(ID == c(1:10), "TGM", "AGM"))
# Read baseline simulation's pastures data
dgz <- data.table::fread(file.path(path, "./Wt Gain Simulation/APEX1605_CO_all20/CONUNN_TGM.DGZ"),
fill = TRUE, skip = 9, header = TRUE) %>%
mutate(Date = lubridate::ymd(paste(Y,M,D, sep = "-")),
Treatment = ifelse(ID %in% c(1:10), "TGM", "AGM"))
# Filter and summarize pastures
dgz_filtered <- dgz %>%
filter(M %in% c(5:9), Y %in% c(2014:2018)) %>%
group_by(Date, Y, Treatment) %>% # summarizing by grazing treatment
summarize(DWG = mean(`DWGkg/d`), GZWT = mean(GZWTkg), .groups = 'drop') %>%
mutate(Simulation = "No variability")
View(dgz_filtered)
weight_data_noVar <- dgz_filtered %>%
split(.$Treatment) %>%
lapply(function(df) df %>% select(-Treatment))
# Filter for grazing treatment of interest (traditional grazing management)
tgm_weight_data_noVar <- weight_data_noVar[['TGM']]
source("~/.active-rstudio-document", echo=TRUE)
View(tgm_weight_data)
# Combining TGM weight data in preparation for visualization of simulation differences
tgm_weight_data <- rbind(tgm_weight_data_spatVar, tgm_weight_data_spatTempVar, tgm_weight_data_noVar)
# Filter for grazing treatment of interest (traditional grazing management)
tgm_weight_data_spatVar <- weight_data_spatVar[['TGM']]
source("~/.active-rstudio-document", echo=TRUE)
setwd("C:/02-APEX1605_spatialtemp/APEX1605_CO_92 subareas_div")
library(tidyverse)
library(data.table)
##### IMPORTING DATA ###########################################################
## Importing file and setting column names
# Traditionally grazed pastures
tgm_dgz <- data.table::fread("./Wt Gain Simulation/APEX1605_CO_TGM/CONUNN_TGM.DGZ",
fill = TRUE, skip = 9, header = TRUE) %>%
mutate(Date = ymd(paste(Y,M,D, sep = "-"))) # adding date column
# Rotationally (adaptively) grazed pastures
agm_dgz <- data.table::fread("./Wt Gain Simulation/APEX1605_CO_AGM/CONUNN_TGM.DGZ",
fill = TRUE, skip = 9, header = TRUE) %>%
mutate(Date = ymd(paste(Y,M,D, sep = "-")))
## Daily precipitation data from Nicole Kaplan
cper_ppt <- read.csv("C:/APEX data and scripts/Data/CPER PPT/CPER daily climate data_model input.csv") %>%
filter(year >= 2014) %>% # filtering for first year of CARM experiment
mutate(date = ymd(paste(year,month,day, sep = "-"))) %>%
group_by(year, date) %>%
summarize(RainTotal_mm = sum(rain.mm.))
##### CLEANING DATA ############################################################
# Filter and prepare data for years and pastures of interest
tgm_dgz_filtered <- tgm_dgz %>%
filter(M %in% c(5:9),
Y %in% c(2014:2018)) %>%
group_by(Date,Y,HERD) %>%
summarize(DWG = mean(`DWGkg/d`), GZWT = mean(GZWTkg))
agm_dgz_filtered <- agm_dgz %>%
filter(M %in% c(5:9),
Y %in% c(2014:2018)) %>%
group_by(Date,Y, HERD, ISA) %>%
summarize(DWG = mean(`DWGkg/d`), GZWT = mean(GZWTkg)) %>%
mutate(herd.isa.month = paste(HERD, ISA, month(Date), sep = "-"))
## Visualization of each grazing treatment
ggplot(tgm_dgz_filtered, aes(x = Date, y = DWG)) +
geom_line(aes(color = as.factor(HERD))) +
scale_color_discrete(name = "Herd") +
theme_bw() +
scale_fill_manual(name = "Data Type", values = "steelblue") +
ylab("Daily Weight Gain (kg/hd/day)") +
facet_wrap(~Y, scales = "free_x") +
theme(text = element_text(size = 15, family = 'serif'))
library(tidyverse)
library(reshape2)
library(data.table)
library(ggsci)
library(hydroGOF)
setwd("C:/02-APEX1605_spatialtemp/")
PastureID <- read.csv("C:/APEX data and scripts/Data/PastureID_ecosite_92subareas.csv") %>%
filter(Treatment == "TRM")
PastureID_20sa <- read.csv("C:/APEX data and scripts/Data/PastureID_ecosite_20subareas.csv")
View(PastureID)
## Daily precipitation data from Nicole Kaplan
cper_ppt <- read.csv("C:/APEX data and scripts/Data/CPER PPT/CPER daily climate data_model input.csv") %>%
filter(year >= 2014) %>% # filtering for first year of CARM experiment
group_by(year) %>%
summarize(RainTotal_mm = sum(rain.mm.))
##### Experimental Observed Data ###############################################
wtg <- read.csv("C:/APEX data and scripts/Data/CPER Cattle/CARM_Cattle Weight Gains_2014-2023_SD.csv") %>%
mutate(gain = ADG / 2.2046) %>%
merge(PastureID_20sa,by = 'Pasture', relationship = "many-to-many",
all.x = TRUE)
# summarizing for each treatment type
Gain <- wtg %>%
select(Year, Treatment, gain) %>%
group_by(Year, Treatment) %>%
dplyr::summarise(MeanWT = mean(gain, na.rm = T),
SD = sd(gain),
Type = "Measured")
# set column names
names(Gain) <- c("Year","Treatment","MeanWT","SD","Type")
# labeling CARM observations
Gain[is.na(Gain)] <- "CARM"
# extract CARM observations
Gain_AGMO <- subset(Gain, Gain$Treatment == "CARM")
Gain_AGMO$Treatment <- NULL
# extract TRM observations
Gain_TGMO <- subset(Gain, Gain$Treatment == "TGM")
Gain_TGMO$Treatment <- "TRM"
agm_agz_base <- data.table::fread("C:/01-APEX1605_CO_baseline/Wt Gain Simulation/APEX1605_CO_all20/CONUNN_TGM.AGZ",
fill = TRUE, skip = 8, header = TRUE) %>%
filter(Year %in% c(2014:2023), ID %in% c(11:20)) %>%
group_by(Year) %>%
summarize(MeanWT = mean(WTG)) %>%
mutate(Type = "Simulated: no variability", SD = 0)
agm_agz_base <- data.table::fread("C:/01-APEX1605_CO_baseline/Wt Gain Simulation/APEX1605_CO_all20/CONUNN_TGM.AGZ",
fill = TRUE, skip = 8, header = TRUE)
agm_agz_base <- data.table::fread("C:/01-APEX1605_CO_baseline/Wt Gain Simulation/APEX1605_CO_all20/CONUNN_TGM.AGZ",
fill = TRUE, skip = 8, header = TRUE) %>%
filter(YR %in% c(2014:2023), ID %in% c(11:20)) %>%
group_by(YR) %>%
summarize(MeanWT = mean(WTG)) %>%
mutate(Type = "Simulated: no variability", SD = 0)
agm_agz_base <- data.table::fread("C:/01-APEX1605_CO_baseline/Wt Gain Simulation/APEX1605_CO_all20/CONUNN_TGM.AGZ",
fill = TRUE, skip = 8, header = TRUE) %>%
filter(YR %in% c(2014:2023), ID %in% c(11:20))
View(agm_agz_base)
agm_agz_base <- data.table::fread("C:/01-APEX1605_CO_baseline/Wt Gain Simulation/APEX1605_CO_all20/CONUNN_TGM.AGZ",
fill = TRUE, skip = 8, header = TRUE, check.names = TRUE) %>%
filter(YR %in% c(2014:2023), ID %in% c(11:20))
agm_agz_base <- data.table::fread("C:/01-APEX1605_CO_baseline/Wt Gain Simulation/APEX1605_CO_all20/CONUNN_TGM.AGZ",
fill = TRUE, skip = 8, header = TRUE, check.names = TRUE) %>%
filter(YR %in% c(2014:2023), ID %in% c(11:20)) %>%
group_by(YR) %>%
summarize(MeanWT = mean(WTG)) %>%
mutate(Type = "Simulated: no variability", SD = 0)
agm_agz_base <- data.table::fread("C:/01-APEX1605_CO_baseline/Wt Gain Simulation/APEX1605_CO_all20/CONUNN_TGM.AGZ",
fill = TRUE, skip = 8, header = TRUE, check.names = TRUE) %>%
filter(YR %in% c(2014:2023), ID %in% c(11:20))
agm_agz_base <- data.table::fread("C:/01-APEX1605_CO_baseline/Wt Gain Simulation/APEX1605_CO_all20/CONUNN_TGM.AGZ",
fill = TRUE, skip = 8, header = TRUE, check.names = TRUE) %>%
filter(YR %in% c(2014:2023), ID %in% c(11:20)) %>%
group_by(YR) %>%
summarize(MeanWT = mean(WTGkg.hd.d)) %>%
mutate(Type = "Simulated: no variability", SD = 0)
agm_agz_base <- data.table::fread("C:/01-APEX1605_CO_baseline/Wt Gain Simulation/APEX1605_CO_all20/CONUNN_TGM.AGZ",
fill = TRUE, skip = 8, header = TRUE, check.names = TRUE) %>%
filter(YR %in% c(2014:2018), ID %in% c(11:20)) %>%
group_by(YR) %>%
summarize(MeanWT = mean(WTGkg.hd.d)) %>%
mutate(Type = "Simulated: no variability", SD = 0)
tgm_agz_base <- data.table::fread("C:/01-APEX1605_CO_baseline/Wt Gain Simulation/APEX1605_CO_all20/CONUNN_TGM.AGZ",
fill = TRUE, skip = 8, header = TRUE, check.names = TRUE) %>%
filter(YR %in% c(2014:2018), ID %in% c(1:10)) %>%
group_by(YR) %>%
summarize(MeanWT = mean(WTGkg.hd.d)) %>%
mutate(Type = "Simulated: no variability", SD = 0)
tgm_agz_spatVar <- data.table::fread("C:/02-APEX1605_spatialtemp/APEX1605_CO_92 subareas_div/Wt Gain Simulation/APEX1605_CO_TGM/CONUNN_TGM.AGZ",
fill = TRUE, skip = 8, header = TRUE, check.names = TRUE) %>%
filter(YR %in% c(2014:2018)) %>%
group_by(YR) %>%
summarize(MeanWT = mean(WTGkg.hd.d)) %>%
mutate(Type = "Simulated: spatial variability", SD = 0)
View(tgm_agz_spatVar)
View(tgm_agz_base)
tgm_agz_spatTempVar <- data.table::fread("C:/02-APEX1605_spatialtemp/APEX1605_CO_92 subareas_div_dyn plant pop/Wt Gain Simulation/APEX1605_CO_TGM/CONUNN_TGM.AGZ",
fill = TRUE, skip = 8, header = TRUE, check.names = TRUE) %>%
filter(YR %in% c(2014:2018)) %>%
group_by(YR) %>%
summarize(MeanWT = mean(WTGkg.hd.d)) %>%
mutate(Type = "Simulated: spatial + temporal variability", SD = 0)
View(tgm_agz_spatVar)
# Observed weight gain
observed_weight_data <- read.csv("C:/APEX data and scripts/Data/CPER Cattle/CARM_Cattle Weight Gains_2014-2023_SD.csv") %>%
mutate(gain = ADG / 2.2046) %>% # converting from lbs to kg
merge(PastureID_20sa,by = 'Pasture', relationship = "many-to-many",
all.x = TRUE)
View(observed_weight_data)
observed_weight_data <- read.csv("C:/APEX data and scripts/Data/CPER Cattle/CARM_Cattle Weight Gains_2014-2023_SD.csv") %>%
mutate(gain = ADG / 2.2046) %>% # converting from lbs to kg
merge(PastureID_20sa,by = 'Pasture', relationship = "many-to-many",
all.x = TRUE)
# summarizing for each treatment type
observed_weight_data_filtered <- observed_weight_data %>%
select(Year, Treatment, gain) %>%
group_by(Year, Treatment) %>%
dplyr::summarise(MeanWT = mean(gain, na.rm = T),
SD = sd(gain),
Type = "Measured")
# Filtering for grazing treatment of interest
tgm_observed_weight_data <- observed_weight_data_filtered %>%
filter(Treatment == "TGM")
## Importing simulated annual mean weight gain data
# Baseline simulation scenario
tgm_agz_base <- data.table::fread("C:/01-APEX1605_CO_baseline/Wt Gain Simulation/APEX1605_CO_all20/CONUNN_TGM.AGZ",
fill = TRUE, skip = 8, header = TRUE, check.names = TRUE) %>%
filter(YR %in% c(2014:2018), ID %in% c(1:10)) %>%
group_by(YR) %>%
summarize(MeanWT = mean(WTGkg.hd.d)) %>%
mutate(Type = "Simulated: no variability", SD = 0) %>%
rename(Year = YR)
# Spatial Variability simulation scenario
tgm_agz_spatVar <- data.table::fread("C:/02-APEX1605_spatialtemp/APEX1605_CO_92 subareas_div/Wt Gain Simulation/APEX1605_CO_TGM/CONUNN_TGM.AGZ",
fill = TRUE, skip = 8, header = TRUE, check.names = TRUE) %>%
filter(YR %in% c(2014:2018)) %>%
group_by(YR) %>%
summarize(MeanWT = mean(WTGkg.hd.d)) %>%
mutate(Type = "Simulated: spatial variability", SD = 0) %>%
rename(Year = YR)
# Spatial + Temporal simulation scenario
tgm_agz_spatTempVar <- data.table::fread("C:/02-APEX1605_spatialtemp/APEX1605_CO_92 subareas_div_dyn plant pop/Wt Gain Simulation/APEX1605_CO_TGM/CONUNN_TGM.AGZ",
fill = TRUE, skip = 8, header = TRUE, check.names = TRUE) %>%
filter(YR %in% c(2014:2018)) %>%
group_by(YR) %>%
summarize(MeanWT = mean(WTGkg.hd.d)) %>%
mutate(Type = "Simulated: spatial + temporal variability", SD = 0)%>%
rename(Year = YR)
View(tgm_observed_weight_data)
# Filtering for grazing treatment of interest
tgm_observed_weight_data <- observed_weight_data_filtered %>%
filter(Treatment == "TGM") %>%
select(-Treatment)
## Combining all traditional grazing observed and simulated data
tgm_weight_data_yearly <- rbind(tgm_observed_weight_data, tgm_agz_base,
tgm_agz_spatVar, tgm_agz_spatTempVar)
View(tgm_weight_data_yearly)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(tgm_weight_data_spatVar_yearly)
View(tgm_weight_data_spatVar_yearly)
View(tgm_weight_data_yearly)
# Create a bar plot with error bars
ggplot(tgm_weight_data_yearly, aes(x = factor(Year), y = MeanWT, fill = Type)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +  # Bars for mean weight
geom_errorbar(aes(ymin = MeanWT - SD, ymax = MeanWT + SD),
position = position_dodge(width = 0.9), width = 0.25) +  # Error bars
labs(title = "Annual Mean Weight Gain by Treatment Type",
x = "Year",
y = "Mean Weight Gain (kg/day)",
fill = "Type") +  # Labels and legend title
theme_minimal() +  # Clean theme
scale_fill_brewer(palette = "Set3")  # Custom color palette (optional)
# Create a bar plot with error bars
ggplot(tgm_weight_data_yearly, aes(x = factor(Year), y = MeanWT, fill = Type)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +  # Bars for mean weight
geom_errorbar(aes(ymin = MeanWT - SD, ymax = MeanWT + SD),
position = position_dodge(width = 0.9), width = 0.25) +  # Error bars
labs(title = "Annual Mean Weight Gain by Treatment Type",
x = "Year",
y = "Mean Weight Gain (kg/day)",
fill = "Type") +  # Labels and legend title
theme_bw() + +  # Clean theme
scale_fill_brewer(palette = "Set3") +
theme(text = element_text(size = 15, family = 'serif'))
# Create a bar plot with error bars
ggplot(tgm_weight_data_yearly, aes(x = factor(Year), y = MeanWT, fill = Type)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +  # Bars for mean weight
geom_errorbar(aes(ymin = MeanWT - SD, ymax = MeanWT + SD),
position = position_dodge(width = 0.9), width = 0.25) +  # Error bars
labs(title = "Annual Mean Weight Gain by Treatment Type",
x = "Year",
y = "Mean Weight Gain (kg/day)",
fill = "Type") +  # Labels and legend title
theme_bw() +   # Clean theme
scale_fill_brewer(palette = "Set3") +
theme(text = element_text(size = 15, family = 'serif'))
observed_weight_data_filtered <- observed_weight_data %>%
select(Year, Treatment, gain) %>%
filter(Year %in% c(2014:2018))
group_by(Year, Treatment) %>%
summarize(MeanWT = mean(gain, na.rm = TRUE), SD = sd(gain), Type = "Measured", .groups = 'drop')
## Combining all traditional grazing observed and simulated data
tgm_weight_data_yearly <- rbind(
tgm_observed_weight_data, tgm_weight_data_noVar_yearly,
tgm_weight_data_spatVar_yearly, tgm_weight_data_spatTempVar_yearly
)
# Create a bar plot with error bars
ggplot(tgm_weight_data_yearly, aes(x = factor(Year), y = MeanWT, fill = Type)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +  # Bars for mean weight
geom_errorbar(aes(ymin = MeanWT - SD, ymax = MeanWT + SD),
position = position_dodge(width = 0.9), width = 0.25) +  # Error bars
labs(title = "Annual Mean Weight Gain by Treatment Type",
x = "Year",
y = "Mean Weight Gain (kg/day)",
fill = "Type") +  # Labels and legend title
theme_bw() +   # Clean theme
scale_fill_brewer(palette = "Set3") +
theme(text = element_text(size = 15, family = 'serif'))
observed_weight_data_filtered <- observed_weight_data %>%
select(Year, Treatment, gain) %>%
filter(Year %in% c(2014:2018)) %>%
group_by(Year, Treatment) %>%
summarize(MeanWT = mean(gain, na.rm = TRUE), SD = sd(gain), Type = "Measured", .groups = 'drop')
# Filtering for traditional grazing (TGM) observed data
tgm_observed_weight_data <- observed_weight_data_filtered %>%
filter(Treatment == "TGM") %>%
select(-Treatment)
## Combining all traditional grazing observed and simulated data
tgm_weight_data_yearly <- rbind(
tgm_observed_weight_data, tgm_weight_data_noVar_yearly,
tgm_weight_data_spatVar_yearly, tgm_weight_data_spatTempVar_yearly
)
# Create a bar plot with error bars
ggplot(tgm_weight_data_yearly, aes(x = factor(Year), y = MeanWT, fill = Type)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +  # Bars for mean weight
geom_errorbar(aes(ymin = MeanWT - SD, ymax = MeanWT + SD),
position = position_dodge(width = 0.9), width = 0.25) +  # Error bars
labs(title = "Annual Mean Weight Gain by Treatment Type",
x = "Year",
y = "Mean Weight Gain (kg/day)",
fill = "Type") +  # Labels and legend title
theme_bw() +   # Clean theme
scale_fill_brewer(palette = "Set3") +
theme(text = element_text(size = 15, family = 'serif'))
# Reorder the levels of the Type column
tgm_weight_data_yearly$Type <- factor(tgm_weight_data_yearly$Type,
levels = c("Measured",
"Simulated: no variability",
"Simulated: spatial variability",
"Simulated: spatial + temporal variability"))
# Create a bar plot with error bars
ggplot(tgm_weight_data_yearly, aes(x = factor(Year), y = MeanWT, fill = Type)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +  # Bars for mean weight
geom_errorbar(aes(ymin = MeanWT - SD, ymax = MeanWT + SD),
position = position_dodge(width = 0.9), width = 0.25) +  # Error bars
labs(x = "Year",
y = "Mean Weight Gain (kg/day)",
fill = "Data Source") +  # Labels and legend title
theme_bw() +   # Clean theme
scale_fill_brewer(palette = "Set3") +
theme(text = element_text(size = 15, family = 'serif'))
# Create a bar plot with error bars
ggplot(tgm_weight_data_yearly, aes(x = factor(Year), y = MeanWT, fill = Type)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +  # Bars for mean weight
geom_errorbar(aes(ymin = MeanWT - SD, ymax = MeanWT + SD),
position = position_dodge(width = 0.9), width = 0.25) +  # Error bars
labs(x = "Year",
y = "Mean Daily Weight Gain (kg/head/day)",
fill = "Data Source") +  # Labels and legend title
theme_bw() +   # Clean theme
scale_fill_brewer(palette = "Set3") +
theme(text = element_text(size = 15, family = 'serif'))
