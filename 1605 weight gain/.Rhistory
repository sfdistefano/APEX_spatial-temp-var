text = element_text(size = 15, family = 'serif'),
plot.title = element_blank()
)
p2 <- ggplot(grazing_weight_data_daily[grazing_weight_data_daily$Treatment == 'TRM', ], aes(x = Date)) +
geom_smooth(aes(y = DWG, color = Simulation), method = "gam", show.legend = FALSE) +
scale_color_manual(values = cbPalette) +
theme_minimal() +
ylab("") +
xlab("") +
facet_wrap(~ year(Date), scales = "free_x") +
theme(
text = element_text(size = 15, family = 'serif'),
plot.title = element_blank()
)
# Daily Animal Weight - CARM (keep legend)
p3 <- ggplot(grazing_weight_data_daily[grazing_weight_data_daily$Treatment == 'CARM', ], aes(x = Date)) +
geom_line(aes(y = GZWT, color = Simulation), linewidth = 0.75) +
scale_color_manual(values = cbPalette) +
theme_minimal() +
ylab("Daily Animal Weight (kg/hd/day)") +
facet_wrap(~ year(Date), scales = "free_x") +
theme(
text = element_text(size = 15, family = 'serif'),
plot.title = element_blank()
)
# Daily Animal Weight - TRM (keep legend)
p4 <- ggplot(grazing_weight_data_daily[grazing_weight_data_daily$Treatment == 'TRM', ], aes(x = Date)) +
geom_line(aes(y = GZWT, color = Simulation), linewidth = 0.75) +
scale_color_manual(values = cbPalette) +
theme_minimal() +
ylab("") +
facet_wrap(~ year(Date), scales = "free_x") +
theme(
text = element_text(size = 15, family = 'serif'),
plot.title = element_blank()
)
# Combine panels
combined_plot <- (p1 + p2) / (p3 + p4) +
plot_layout(guides = 'collect') +
plot_annotation(tag_levels = 'a') &
theme(legend.position = "right")
# Add column labels using cowplot
title_row <- cowplot::plot_grid(
cowplot::ggdraw() + cowplot::draw_label("CARM", fontface = "bold", fontfamily = "serif", size = 16, hjust = 0.5),
cowplot::ggdraw() + cowplot::draw_label("TRM", fontface = "bold", fontfamily = "serif", size = 16, hjust = 0.45),
ncol = 2
)
# Stack column labels above combined figure
final_plot <- cowplot::plot_grid(
title_row,
combined_plot,
ncol = 1,
rel_heights = c(0.05, 1)
)
# Display
print(final_plot)
View(dgz_spatVar)
View(dgz_spatVar)
View(dgz_noVar)
# Filter and summarize pastures
dgz_filtered_noVar <- dgz_noVar %>%
filter(M %in% c(5:9),
Y %in% c(2014:2018),
`DWGkg/d` > 0) %>% # Filters out pastures that were rested
group_by(Date, Y, Treatment) %>% # summarizing by grazing treatment
summarize(DWG = mean(`DWGkg/d`), GZWT = mean(GZWTkg), .groups = 'drop') %>%
mutate(Simulation = "No variability")
# Filter and summarize pastures
dgz_filtered_spatVar <- dgz_spatVar %>%
filter(M %in% c(5:9),
Y %in% c(2014:2018),
`DWGkg/d` > 0) %>%
group_by(Date, Y, Treatment) %>% # summarizing by grazing treatment
summarize(DWG = mean(`DWGkg/d`), GZWT = mean(GZWTkg), .groups = 'drop') %>%
mutate(Simulation = "Spatial variability")
# Combine both simulation datasets
grazing_weight_data_daily <- rbind(dgz_filtered_noVar, dgz_filtered_spatVar)
# Make sure Simulation factor levels match the palette order
grazing_weight_data_daily$Simulation <- factor(grazing_weight_data_daily$Simulation,
levels = unique(grazing_weight_data_daily$Simulation))
ggplot(grazing_weight_data_daily[grazing_weight_data_daily$Treatment == 'CARM', ], aes(x = Date)) +
geom_smooth(aes(y = DWG, color = Simulation), method = "gam", show.legend = FALSE) +
scale_color_manual(values = cbPalette) +
theme_minimal() +
ylab("Daily Weight Gain (kg/hd/day)") +
xlab("") +
facet_wrap(~ year(Date), scales = "free_x") +
theme(
text = element_text(size = 15, family = 'serif'),
plot.title = element_blank()
)
p1 <- ggplot(grazing_weight_data_daily[grazing_weight_data_daily$Treatment == 'CARM', ], aes(x = Date)) +
geom_smooth(aes(y = DWG, color = Simulation), method = "gam", show.legend = FALSE) +
scale_color_manual(values = cbPalette) +
theme_minimal() +
ylab("Daily Weight Gain (kg/hd/day)") +
xlab("") +
facet_wrap(~ year(Date), scales = "free_x") +
theme(
text = element_text(size = 15, family = 'serif'),
plot.title = element_blank()
)
# Daily Weight Gain - TRM (no legend)
p2 <- ggplot(grazing_weight_data_daily[grazing_weight_data_daily$Treatment == 'TRM', ], aes(x = Date)) +
geom_smooth(aes(y = DWG, color = Simulation), method = "gam", show.legend = FALSE) +
scale_color_manual(values = cbPalette) +
theme_minimal() +
ylab("") +
xlab("") +
facet_wrap(~ year(Date), scales = "free_x") +
theme(
text = element_text(size = 15, family = 'serif'),
plot.title = element_blank()
)
# Daily Animal Weight - CARM (keep legend)
p3 <- ggplot(grazing_weight_data_daily[grazing_weight_data_daily$Treatment == 'CARM', ], aes(x = Date)) +
geom_line(aes(y = GZWT, color = Simulation), linewidth = 0.75) +
scale_color_manual(values = cbPalette) +
theme_minimal() +
ylab("Daily Animal Weight (kg/hd/day)") +
facet_wrap(~ year(Date), scales = "free_x") +
theme(
text = element_text(size = 15, family = 'serif'),
plot.title = element_blank()
)
# Daily Animal Weight - TRM (keep legend)
p4 <- ggplot(grazing_weight_data_daily[grazing_weight_data_daily$Treatment == 'TRM', ], aes(x = Date)) +
geom_line(aes(y = GZWT, color = Simulation), linewidth = 0.75) +
scale_color_manual(values = cbPalette) +
theme_minimal() +
ylab("") +
facet_wrap(~ year(Date), scales = "free_x") +
theme(
text = element_text(size = 15, family = 'serif'),
plot.title = element_blank()
)
# Combine panels
combined_plot <- (p1 + p2) / (p3 + p4) +
plot_layout(guides = 'collect') +
plot_annotation(tag_levels = 'a') &
theme(legend.position = "right")
# Add column labels using cowplot
title_row <- cowplot::plot_grid(
cowplot::ggdraw() + cowplot::draw_label("CARM", fontface = "bold", fontfamily = "serif", size = 16, hjust = 0.5),
cowplot::ggdraw() + cowplot::draw_label("TRM", fontface = "bold", fontfamily = "serif", size = 16, hjust = 0.45),
ncol = 2
)
# Stack column labels above combined figure
final_plot <- cowplot::plot_grid(
title_row,
combined_plot,
ncol = 1,
rel_heights = c(0.05, 1)
)
# Display
print(final_plot)
# --- Publication Export (PNG at 300 dpi) ---
# Export plot
ggsave(
filename = "C:/Users/Sean.DiStefano/Documents/GitHub/APEX_spatial-temp-var/1605 weight gain/Figure_animal weight_v02.png",
plot = final_plot,
width = 15,       # width in inches
height = 7,      # height in inches
dpi = 300,       # publication resolution
units = "in",
bg = "white"     # ensure transparent background is not used
)
# Filter and summarize pastures
dgz_filtered_noVar <- dgz_noVar %>%
filter(M %in% c(5:9),
Y %in% c(2014:2018)) %>% # Filters out pastures that were rested
group_by(Date, Y, Treatment) %>% # summarizing by grazing treatment
summarize(DWG = mean(`DWGkg/d`), GZWT = mean(GZWTkg), .groups = 'drop') %>%
mutate(Simulation = "No variability")
View(dgz_filtered_noVar)
# Filter and summarize pastures
dgz_filtered_noVar <- dgz_noVar %>%
filter(M %in% c(5:9),
Y %in% c(2014:2018)) %>% # Filters out pastures that were rested
group_by(Date, Y, Treatment) %>% # summarizing by grazing treatment
summarize(DWG = mean(`DWGkg/d`), GZWT = mean(GZWTkg), .groups = 'drop') %>%
mutate(Simulation = "No variability")
# Filter and summarize pastures
dgz_filtered_spatVar <- dgz_spatVar %>%
filter(M %in% c(5:9),
Y %in% c(2014:2018)) %>%
group_by(Date, Y, Treatment) %>% # summarizing by grazing treatment
summarize(DWG = mean(`DWGkg/d`), GZWT = mean(GZWTkg), .groups = 'drop') %>%
mutate(Simulation = "Spatial variability")
View(dgz_filtered_spatVar)
View(dgz_spatVar)
View(dgz_spatVar)
View(dgz_noVar)
# Filter and summarize pastures
dgz_filtered_noVar <- dgz_noVar %>%
filter(M %in% c(5:9),
Y %in% c(2014:2018)) %>% # Filters out pastures that were rested
distinct() %>%
group_by(Date, Y, Treatment) %>% # summarizing by grazing treatment
summarize(DWG = mean(`DWGkg/d`), GZWT = mean(GZWTkg), .groups = 'drop') %>%
mutate(Simulation = "No variability")
dgz_filtered_noVar <- dgz_noVar %>%
filter(M %in% c(5:9),
Y %in% c(2014:2018)) %>% # Filters out pastures that were rested
distinct()
View(dgz_filtered_noVar)
dgz_filtered_noVar <- dgz_noVar %>%
filter(M %in% c(5:9),
Y %in% c(2014:2018)) %>% # Filters out pastures that were rested
select(-CPNM) %>%
distinct()
dgz_filtered_noVar <- dgz_noVar %>%
filter(M %in% c(5:9),
Y %in% c(2014:2018)) %>% # Filters out pastures that were rested
select(-FORG) %>%
distinct()
View(dgz_filtered_noVar)
colnames(dgz_noVar)
dgz_filtered_noVar <- dgz_noVar %>%
filter(M %in% c(5:9),
Y %in% c(2014:2018)) %>% # Filters out pastures that were rested
select(ID, Date, Y, HERD, Treatment, `DWGkg/d`, GZWTkg) %>%
distinct()
View(dgz_filtered_noVar)
dgz_filtered_noVar <- dgz_noVar %>%
filter(M %in% c(5:9),
Y %in% c(2014:2018)) %>% # Filters out pastures that were rested
select(ID, Date, Y, HERD, Treatment, `DWGkg/d`, GZWTkg)
# Filter and summarize pastures
dgz_filtered_noVar <- dgz_noVar %>%
filter(M %in% c(5:9),
Y %in% c(2014:2018)) %>% # Filters out pastures that were rested
select(ID, Date, Y, HERD, Treatment, `DWGkg/d`, GZWTkg) %>%
distinct() %>%
group_by(Date, Y, Treatment) %>% # summarizing by grazing treatment
summarize(DWG = mean(`DWGkg/d`), GZWT = mean(GZWTkg), .groups = 'drop') %>%
mutate(Simulation = "No variability")
View(dgz_filtered_noVar)
dgz_filtered_spatVar <- dgz_spatVar %>%
filter(M %in% c(5:9),
Y %in% c(2014:2018)) %>%
select(ID, Date, Y, HERD, Treatment, `DWGkg/d`, GZWTkg) %>%
distinct()
View(dgz_filtered_spatVar)
# Filter and summarize pastures
dgz_filtered_spatVar <- dgz_spatVar %>%
filter(M %in% c(5:9),
Y %in% c(2014:2018)) %>%
select(ID, Date, Y, HERD, Treatment, `DWGkg/d`, GZWTkg) %>%
distinct() %>%
filter(`DWGkg/d` > 0) # filtering out subareas where there isn't a daily weight output
# Filter and summarize pastures
dgz_filtered_spatVar <- dgz_spatVar %>%
filter(M %in% c(5:9),
Y %in% c(2014:2018)) %>%
select(ID, Date, Y, HERD, Treatment, `DWGkg/d`, GZWTkg) %>%
distinct() %>%
filter(`DWGkg/d` > 0) %>%# filtering out subareas where there isn't a daily weight output
group_by(Date, Y, Treatment) %>% # summarizing by grazing treatment
summarize(DWG = mean(`DWGkg/d`), GZWT = mean(GZWTkg), .groups = 'drop') %>%
mutate(Simulation = "Spatial variability")
# Combine both simulation datasets
grazing_weight_data_daily <- rbind(dgz_filtered_noVar, dgz_filtered_spatVar)
cbPalette <- c("#E69F00", "#0072B2")
# Make sure Simulation factor levels match the palette order
grazing_weight_data_daily$Simulation <- factor(grazing_weight_data_daily$Simulation,
levels = unique(grazing_weight_data_daily$Simulation))
# --- Build the 4 panels ---
# Daily Weight Gain - CARM (no legend)
p1 <- ggplot(grazing_weight_data_daily[grazing_weight_data_daily$Treatment == 'CARM', ], aes(x = Date)) +
geom_smooth(aes(y = DWG, color = Simulation), method = "gam", show.legend = FALSE) +
scale_color_manual(values = cbPalette) +
theme_minimal() +
ylab("Daily Weight Gain (kg/hd/day)") +
xlab("") +
facet_wrap(~ year(Date), scales = "free_x") +
theme(
text = element_text(size = 15, family = 'serif'),
plot.title = element_blank()
)
# Daily Weight Gain - TRM (no legend)
p2 <- ggplot(grazing_weight_data_daily[grazing_weight_data_daily$Treatment == 'TRM', ], aes(x = Date)) +
geom_smooth(aes(y = DWG, color = Simulation), method = "gam", show.legend = FALSE) +
scale_color_manual(values = cbPalette) +
theme_minimal() +
ylab("") +
xlab("") +
facet_wrap(~ year(Date), scales = "free_x") +
theme(
text = element_text(size = 15, family = 'serif'),
plot.title = element_blank()
)
# Daily Animal Weight - CARM (keep legend)
p3 <- ggplot(grazing_weight_data_daily[grazing_weight_data_daily$Treatment == 'CARM', ], aes(x = Date)) +
geom_line(aes(y = GZWT, color = Simulation), linewidth = 0.75) +
scale_color_manual(values = cbPalette) +
theme_minimal() +
ylab("Daily Animal Weight (kg/hd/day)") +
facet_wrap(~ year(Date), scales = "free_x") +
theme(
text = element_text(size = 15, family = 'serif'),
plot.title = element_blank()
)
# Daily Animal Weight - TRM (keep legend)
p4 <- ggplot(grazing_weight_data_daily[grazing_weight_data_daily$Treatment == 'TRM', ], aes(x = Date)) +
geom_line(aes(y = GZWT, color = Simulation), linewidth = 0.75) +
scale_color_manual(values = cbPalette) +
theme_minimal() +
ylab("") +
facet_wrap(~ year(Date), scales = "free_x") +
theme(
text = element_text(size = 15, family = 'serif'),
plot.title = element_blank()
)
# Combine panels
combined_plot <- (p1 + p2) / (p3 + p4) +
plot_layout(guides = 'collect') +
plot_annotation(tag_levels = 'a') &
theme(legend.position = "right")
# Add column labels using cowplot
title_row <- cowplot::plot_grid(
cowplot::ggdraw() + cowplot::draw_label("CARM", fontface = "bold", fontfamily = "serif", size = 16, hjust = 0.5),
cowplot::ggdraw() + cowplot::draw_label("TRM", fontface = "bold", fontfamily = "serif", size = 16, hjust = 0.45),
ncol = 2
)
# Stack column labels above combined figure
final_plot <- cowplot::plot_grid(
title_row,
combined_plot,
ncol = 1,
rel_heights = c(0.05, 1)
)
# Display
print(final_plot)
title_row <- cowplot::plot_grid(
cowplot::ggdraw() +
cowplot::draw_label("CARM", fontface = "bold", fontfamily = "serif", size = 16, hjust = 0.5),
cowplot::ggdraw() +
cowplot::draw_label("TRM", fontface = "bold", fontfamily = "serif", size = 16, hjust = 0.45,
x = 0.3),
ncol = 2
)
# Stack column labels above combined figure
final_plot <- cowplot::plot_grid(
title_row,
combined_plot,
ncol = 1,
rel_heights = c(0.05, 1)
)
# Display
print(final_plot)
combined_plot <- (p1 + p2) / (p3 + p4) +
plot_layout(guides = 'collect') +
plot_annotation(tag_levels = 'a', tag_prefix = "(", tag_suffix = ") ") &
theme(legend.position = "right")
# Add column labels using cowplot
title_row <- cowplot::plot_grid(
cowplot::ggdraw() +
cowplot::draw_label("CARM", fontface = "bold", fontfamily = "serif", size = 16, hjust = 0.5),
cowplot::ggdraw() +
cowplot::draw_label("TRM", fontface = "bold", fontfamily = "serif", size = 16, hjust = 0.45,
x = 0.3),
ncol = 2
)
# Stack column labels above combined figure
final_plot <- cowplot::plot_grid(
title_row,
combined_plot,
ncol = 1,
rel_heights = c(0.05, 1)
)
# Display
print(final_plot)
source("~/GitHub/APEX_spatial-temp-var/spatVar_pub figures_wt gain.R", echo = TRUE)
?geom_smooth()
ggplot(grazing_weight_data_daily[grazing_weight_data_daily$Treatment == 'CARM', ], aes(x = Date)) +
geom_smooth(aes(y = DWG, color = Simulation), method = "gam", se = FALSE,show.legend = FALSE) +
scale_color_manual(values = cbPalette) +
theme_minimal() +
ylab("Daily Weight Gain (kg/hd/day)") +
xlab("") +
facet_wrap(~ year(Date), scales = "free_x") +
theme(
text = element_text(size = 15, family = 'serif'),
plot.title = element_blank()
)
ggplot(grazing_weight_data_daily[grazing_weight_data_daily$Treatment == 'CARM', ], aes(x = Date)) +
geom_smooth(aes(y = DWG, color = Simulation), method = "gam", show.legend = FALSE) +
scale_color_manual(values = cbPalette) +
theme_minimal() +
ylab("Daily Weight Gain (kg/hd/day)") +
xlab("") +
facet_wrap(~ year(Date), scales = "free_x") +
theme(
text = element_text(size = 15, family = 'serif'),
plot.title = element_blank()
)
source("~/GitHub/APEX_spatial-temp-var/spatVar_pub figures_wt gain.R", echo = TRUE)
ggplot(grazing_weight_data_daily[grazing_weight_data_daily$Treatment == 'TRM', ], aes(x = Date)) +
geom_smooth(aes(y = DWG, color = Simulation), method = "gam", show.legend = FALSE) +
scale_color_manual(values = cbPalette) +
theme_minimal() +
ylab("") +
xlab("") +
facet_wrap(~ year(Date), scales = "free_x") +
theme(
text = element_text(size = 15, family = 'serif'),
plot.title = element_blank()
)
source("~/GitHub/APEX_spatial-temp-var/spatVar_pub figures_wt gain.R", echo = TRUE)
ggplot(grazing_weight_data_daily[grazing_weight_data_daily$Treatment == 'CARM', ], aes(x = Date)) +
geom_smooth(aes(y = DWG, color = Simulation), method = "gam", se = FALSE, show.legend = TRUE) +
scale_color_manual(values = cbPalette) +
theme_minimal() +
ylab("Daily Weight Gain (kg/hd/day)") +
xlab("") +
facet_wrap(~ year(Date), scales = "free_x") +
theme(
text = element_text(size = 15, family = 'serif'),
plot.title = element_blank()
)
source("~/GitHub/APEX_spatial-temp-var/spatVar_pub figures_wt gain.R", echo = TRUE)
# Load necessary libraries
library(data.table)
library(tidyverse)
library(patchwork)
library(ggsci)  # For nejm color palette
# Define years of interest
years <- 2014:2018
# ----- PROCESSING FOR DRY MATTER INTAKE -----
process_agz_data <- function(file_path, source_label) {
fread(file_path, fill = TRUE, skip = 8, header = TRUE, check.names = TRUE) %>%
filter(YR %in% years) %>%
mutate(Treatment = ifelse(HERD %in% 1:10, "TRM", "CARM")) %>%
group_by(YR, Treatment, HERD, ID) %>%
summarize(total_dmi = sum(DMIkg.hd), .groups = "drop") %>%
group_by(YR, Treatment, HERD) %>%
summarize(herd_dmi = sum(total_dmi), .groups = "drop") %>%
group_by(YR, Treatment) %>%
summarize(trt_dmi = mean(herd_dmi), .groups = "drop") %>%
mutate(Source = source_label,
Group = factor(paste(Treatment, source_label, sep = "-")))
}
# File paths for DMI
file_noVar_dmi <- "C:/Users/Sean.DiStefano/Downloads/APEX1605_NEW/APEX1605_CO_all20_noCAGbm/CONUNN_TGM.AGZ"
file_spatVar_dmi <- "C:/Users/Sean.DiStefano/Downloads/APEX1605_NEW/APEX1605_CO_all92_noCAGbm/CONUNN_TGM.AGZ"
# Process DMI
agz_noVar_dmi <- process_agz_data(file_noVar_dmi, "NoVar")
agz_spatVar_dmi <- process_agz_data(file_spatVar_dmi, "SpatVar")
dmi_combined <- rbind(agz_noVar_dmi, agz_spatVar_dmi)
# Custom colors for DMI plot
custom_colors <- c(
"TRM-NoVar" = "#E69F00", "TRM-SpatVar" = "#CC6600",
"CARM-NoVar" = "#009E73", "CARM-SpatVar" = "#007360"
)
dmi_combined$Group <- factor(dmi_combined$Group, levels = names(custom_colors))
# DMI Plot
plot_dmi <- ggplot(dmi_combined, aes(x = as.factor(YR), y = trt_dmi, fill = Group)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
labs(x = "Year", y = "Annual Dry Matter Intake (kg/hd/year)", fill = "Treatment-Simulation") +
theme_minimal() +
scale_fill_manual(values = custom_colors, drop = FALSE) +
theme(text = element_text(size = 20, family = "serif"), legend.position = "right") +
scale_x_discrete(labels = years)
# ----- PROCESSING FOR MEAN PERCENTAGE -----
process_data <- function(file_path, simulation_label) {
data <- fread(file_path, fill = TRUE, skip = 8, header = TRUE, check.names = TRUE) %>%
filter(YR %in% years) %>%
mutate(
Treatment = ifelse(HERD <= 10, "TRM", "CARM"),
Intake = GZSLkg.ha + GZSDkg.ha,
Simulation = simulation_label
)
herd_summary <- data %>%
group_by(YR, HERD, Treatment, CPNM, Simulation) %>%
summarise(HerdIntake = sum(Intake, na.rm = TRUE), .groups = "drop")
herd_totals <- herd_summary %>%
group_by(YR, HERD, Simulation) %>%
summarise(TotalIntake = sum(HerdIntake), .groups = "drop")
# FIXED: Now correctly joining herd_summary with herd_totals
herd_percent <- herd_summary %>%
left_join(herd_totals, by = c("YR", "HERD", "Simulation")) %>%
mutate(Percentage = 100 * HerdIntake / TotalIntake)
treatment_summary <- herd_percent %>%
group_by(YR, Treatment, CPNM, Simulation) %>%
summarise(
MeanPercentage = mean(Percentage, na.rm = TRUE),
SE = sd(Percentage, na.rm = TRUE) / sqrt(n()),
.groups = "drop"
)
return(treatment_summary)
}
# File paths for percentage
file_base <- "C:/Users/Sean.DiStefano/Downloads/APEX1605_NEW/APEX1605_CO_all20_noCAGbm/CONUNN_TGM.AGZ"
file_spatial <- "C:/Users/Sean.DiStefano/Downloads/APEX1605_NEW/APEX1605_CO_all92_noCAGbm/CONUNN_TGM.AGZ"
# Process percentage data
data_base <- process_data(file_base, "No Variability")
data_spatial <- process_data(file_spatial, "Spatial Variability")
combined_data <- rbind(data_base, data_spatial)
# Percentage Plot
plot_percentage <- ggplot(combined_data, aes(x = as.factor(YR), y = MeanPercentage, fill = CPNM)) +
geom_bar(stat = "identity", position = "stack") +
facet_grid(Treatment ~ Simulation) +
labs(x = "Year", y = "Mean Percentage of Total Intake (% weight)", fill = "Plant Group") +
theme_minimal() +
theme(text = element_text(family = "serif", size = 20)) +
scale_fill_nejm(name = "Plant Group")
# ----- COMBINE BOTH PLOTS -----
combined_plot <- (plot_dmi / plot_percentage) +
plot_annotation(tag_levels = 'a', tag_prefix = "(", tag_suffix = ") ")
# Print combined plot
combined_plot
