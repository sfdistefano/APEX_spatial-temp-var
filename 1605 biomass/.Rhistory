setwd("C:/Users/Sean.DiStefano/Documents/GitHub/APEX_spatial-temp-var/1605 biomass")
biomass_spatial_Aug12_plot <- biomass_spatial %>%
# Group the data by specific columns to prepare for cumulative calculations
group_by(Treatment, ID, CPNM, Y) %>%
# Arrange the grouped data by date
arrange(Date) %>%
# Calculate the cumulative sum of biomass (DDMkg_ha) for each group
mutate(cumulative_DDMkg_ha = cumsum(DDMkg_ha)) %>%
# Remove the grouping structure to return to a regular data frame
ungroup() %>%
# Filter the data to include only observations from August 12
filter(month(Date) == 8, day(Date) == 12) %>%
# Further filter to include only specific categories of CPNM
filter(CPNM %in% c("CSPG", "WSPG", "FRB3", "VUOC")) %>%
# Recode values in the CPNM column to new categories for clarity
mutate(CPNM = recode(CPNM,
"VUOC" = "CSAG",
"FRB3" = "FORB"))
## Data at pasture level
biomass_spatial_Aug12 <- biomass_spatial_Aug12_plot %>%
# summarize to pasture-scale
group_by(Date, Treatment, Pasture, CPNM, Y) %>%
summarize(biomass_pasture = round(mean(cumulative_DDMkg_ha), 2)) %>%
# Recode values in the CPNM column to new categories for clarity
mutate(CPNM = recode(CPNM,
"VUOC" = "CSAG",
"FRB3" = "FORB")) %>%
mutate(Sim.Type = "Spatial Variability")
### Data from baseline scenario
biomass_noVar_Aug12 <- biomass_no_variability %>%
# Group the data by specific columns to prepare for cumulative calculations
group_by(Treatment, Pasture, CPNM, Y) %>%
# Arrange the grouped data by date
arrange(Date) %>%
# Calculate the cumulative sum of biomass (DDMkg_ha) for each group
mutate(biomass_pasture = cumsum(DDMkg_ha)) %>%
# Remove the grouping structure to return to a regular data frame
ungroup() %>%
# Filter the data to include only observations from August 12
filter(month(Date) == 8, day(Date) == 12) %>%
# Further filter to include only specific categories of CPNM
filter(CPNM %in% c("CSPG", "WSPG", "FRB3", "VUOC")) %>%
# Recode values in the CPNM column to new categories for clarity
mutate(CPNM = recode(CPNM,
"VUOC" = "CSAG",
"FRB3" = "FORB")) %>%
# Select only necessary columns to combine with spatial var. dataset
select(Date, Treatment, Pasture, CPNM, Y, biomass_pasture) %>%
mutate(Sim.Type = "No Variability")
## Combine both datasets
biomass_simulated_Aug12 <- rbind(biomass_noVar_Aug12, biomass_spatial_Aug12) %>%
mutate(Y = as.integer(Y))
## Prepare data for comparison
biomass_observed_plot <- observed_data %>%
# Filter the observed data for specific categories and year constraints
filter(APEXcodeFG %in% c("CSPG", "WSPG", "FORB", "CSAG"),
Year <= 2018) %>%
# Recode Treatment column to align categories with the biomass data
mutate(Treatment = recode(Treatment,
"TGM" = "TRM",
"AGM" = "CARM"),
# Recode Pasture column for consistent naming
Pasture = recode(Pasture,
"NH" = "10S")) %>%
rename(CPNM = APEXcodeFG,
Y = Year) %>%
# remove prescribed burn plots
filter(!(Pasture == "19N" & Plot %in% c(5:6))) %>%
filter(!(Pasture == "18S" & Plot %in% c(5:6)))
# Summarize at pasture-scale
biomass_observed_pasture <- biomass_observed_plot %>%
group_by(Date, Treatment, Pasture, CPNM, Y) %>%
summarize(biomass_pasture = round(mean(MeankgPerHa_plot), 2),
uncertainty = round((sd(MeankgPerHa_plot)/mean(MeankgPerHa_plot)) * 100, 2))
######### FUNCTION FOR HARMEL'S MODIFICATION STATISTICS ########################
# Function for GOF stats with Modification 2
compute_mod2_stats <- function(df) {
df <- df %>%
mutate(
# Assign a small default (e.g., 1) when uncertainty is NA or zero
# Happens when observed values are 0 with no variability (i.e., no uncertainty)
uncertainty = ifelse(is.na(uncertainty) | uncertainty <= 0, 1, uncertainty)
)
prob <- pnorm(df$simulated, mean = df$observed, sd = df$uncertainty)
prob_adj <- ifelse(prob > 0.5, 1 - prob, prob)
CF <- 1 - 2 * prob_adj
eu2i <- CF * 0.5 * abs(df$observed - df$simulated)
NSE_mod2 <- 1 - sum(eu2i^2) / sum((df$observed - mean(df$observed))^2)
d_mod2 <- 1 - sum(eu2i^2) / sum((abs(df$simulated - mean(df$observed)) + abs(df$observed - mean(df$observed)))^2)
RMSE_mod2 <- sqrt(mean(eu2i^2))
MAE_mod2 <- mean(abs(eu2i))
data.frame(
NSE_mod2 = NSE_mod2,
d_mod2 = d_mod2,
RMSE_mod2 = RMSE_mod2,
MAE_mod2 = MAE_mod2
)
}
##### PASTURE LEVEL STATISTICS #################################################
# Prepare the simulated data
sim_data_clean <- biomass_simulated_Aug12 %>%
rename(simulated = biomass_pasture) %>%
select(Date, Y, Treatment, Pasture, CPNM, Sim.Type, simulated)
# Prepare the observed data
obs_data_clean <- biomass_observed_pasture %>%
rename(observed = biomass_pasture) %>%
select(Date, Y, Treatment, Pasture, CPNM, observed, uncertainty)
# Join simulated and observed data on shared keys
comparison_df <- merge(
sim_data_clean,
obs_data_clean,
by = c("Date", "Y", "Treatment", "Pasture", "CPNM")
)
# Compute GOF metrics for each Sim.Type and CPNM
mod2_summary <- comparison_df %>%
group_by(Sim.Type, CPNM) %>%
group_modify(~ compute_mod2_stats(.x)) %>%
ungroup()
# Print results
print(mod2_summary)
####################### PASTURE STATS VISUALIZATION ############################
#---- 1. Compute delta metrics from mod2_summary ----#
delta_df <- mod2_summary %>%
pivot_wider(
names_from = Sim.Type,
values_from = c(NSE_mod2, d_mod2, RMSE_mod2, MAE_mod2),
names_sep = "."
) %>%
mutate(
delta_NSE  = `NSE_mod2.Spatial Variability` - `NSE_mod2.No Variability`,
delta_d    = `d_mod2.Spatial Variability` - `d_mod2.No Variability`,
delta_RMSE = `RMSE_mod2.Spatial Variability` - `RMSE_mod2.No Variability`,
delta_MAE  = `MAE_mod2.Spatial Variability`  - `MAE_mod2.No Variability`
)
#---- 2. Generic plotting function ----#
plot_delta <- function(df, delta_col, y_label) {
ggplot(df, aes(x = CPNM, y = .data[[delta_col]],
fill = .data[[delta_col]] > 0)) +
geom_bar(stat = "identity", width = 0.6) +
scale_fill_manual(values = c("TRUE" = "forestgreen",
"FALSE" = "firebrick"), guide = "none") +
labs(y = y_label, x = "CPNM") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray40") +
theme_minimal(base_size = 15) +
theme(text = element_text(family = "serif"))
}
#---- 3. Generate all delta plots ----#
p1 <- plot_delta(delta_df, "delta_NSE",  "∆ NSE") + labs(x = NULL)
p2 <- plot_delta(delta_df, "delta_d",    "∆ d") + labs(x = NULL)
p3 <- plot_delta(delta_df, "delta_RMSE", "∆ RMSE")
p4 <- plot_delta(delta_df, "delta_MAE",  "∆ MAE")
#---- 4. Combine into grid ----#
(p1 | p2) / (p3 | p4) + plot_layout(heights = c(1, 1.05))
# Save output
# ggsave("delta_gof_metrics.png", width = 12, height = 8, dpi = 300)
##### SIMULATION COMPARISON STATS ##############################################
library(lubridate)
summarize_biomass_pasture <- function(data) {
data %>%
# Group data by treatment, ID, plant community (CPNM), and year
group_by(Treatment, ID, CPNM, Y) %>%
# Arrange data by date and calculate cumulative biomass for each observation
arrange(Date) %>%
mutate(cumulative_DDMkg_ha = cumsum(DDMkg_ha),
month_day = format(Date, "%m-%d")) %>%
ungroup() %>%
mutate(month = month(Date),
day = day(Date)) %>%
# Group by date, treatment, pasture, plant community, year, and month-day
group_by(Date, Treatment, Pasture, CPNM, Y, month_day, month, day) %>%
# Calculate the mean cumulative biomass for each pasture
summarize(mean_DDMkg_ha_pasture = mean(cumulative_DDMkg_ha, na.rm = TRUE)) %>%
ungroup()
}
# Summarize the biomass datasets
# - Summarize cumulative biomass for each treatment and year
biomass_summary_spatial_pasture <- summarize_biomass_pasture(biomass_spatial) %>%
mutate(Sim.Type = "Spatial Variability")
biomass_summary_no_var_pasture <- summarize_biomass_pasture(biomass_no_variability) %>%
mutate(Sim.Type = "No Variability")
combined_summary_pasture <- bind_rows(biomass_summary_spatial_pasture,
biomass_summary_no_var_pasture) %>%
filter(month >= 5 & month <= 10)
# Linear model comparing both scenarios
mod_biomass <- lm(mean_DDMkg_ha_pasture ~ Sim.Type * CPNM + Y,
data = combined_summary_pasture)
summary(mod_biomass)
# Pair-wise contrasts
emm_biomass <- emmeans(mod_biomass, ~ Sim.Type | CPNM)
library(emmeans)
# Pair-wise contrasts
emm_biomass <- emmeans(mod_biomass, ~ Sim.Type | CPNM)
# Post-hoc analysis of pair-wise contrasts
pairs(emm_biomass, adjust = "tukey", reverse = TRUE)
emm_biomass_df <- emm_biomass %>% as.data.frame()
ggplot(emm_biomass_df, aes(x = CPNM, y = emmean, fill = Sim.Type)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL),
position = position_dodge(width = 0.8),
width = 0.2) +
labs(
title = "Estimated Marginal Means of Biomass by Species and Simulation Type",
x = "Species (CPNM)",
y = "Estimated Biomass (kg/ha)",
fill = "Simulation Type"
) +
theme_minimal(base_size = 14)
library(tidyverse)   # Includes functions for data wrangling, manipulation, and plotting
library(data.table)  # Fast data manipulation tools
library(ggsci)       # Provides scientific journal color palettes for ggplot
library(patchwork)
library(emmeans)
?pnorm
View(comparison_df)
View(mod2_summary)
compute_mod2_stats <- function(df) {
df <- df %>%
# calculating probability distribution of observed values
prob <- pnorm(df$simulated, mean = df$observed, sd = df$uncertainty)
CF <- 1 - 2 * prob_adj
eu2i <- (CF/0.5) * (df$observed - df$simulated)
NSE_mod2 <- 1 - sum(eu2i^2) / sum((df$observed - mean(df$observed))^2)
d_mod2 <- 1 - sum(eu2i^2) / sum((abs(df$simulated - mean(df$observed)) + abs(df$observed - mean(df$observed)))^2)
RMSE_mod2 <- sqrt(mean(eu2i^2))
MAE_mod2 <- mean(abs(eu2i))
# data.frame(
#   NSE_mod2 = NSE_mod2,
#   d_mod2 = d_mod2,
#   RMSE_mod2 = RMSE_mod2,
#   MAE_mod2 = MAE_mod2
# )
}
# Compute GOF metrics for each Sim.Type and CPNM
mod2_summary <- comparison_df %>%
group_by(Sim.Type, CPNM) %>%
group_modify(~ compute_mod2_stats(.x)) %>%
ungroup()
compute_mod2_stats <- function(df) {
df <- df %>%
# calculating probability distribution of observed
p <- pnorm(df$simulated, mean = df$observed, sd = df$uncertainty)
prob_adj <- ifelse(prob > 0.5, 1 - prob, prob)
CF <- 1 - 2 * prob_adj
eu2i <- (CF/0.5) * (df$observed - df$simulated)
NSE_mod2 <- 1 - sum(eu2i^2) / sum((df$observed - mean(df$observed))^2)
d_mod2 <- 1 - sum(eu2i^2) / sum((abs(df$simulated - mean(df$observed)) +
abs(df$observed - mean(df$observed)))^2)
RMSE_mod2 <- sqrt(mean(eu2i^2))
MAE_mod2 <- mean(abs(eu2i))
data.frame(
NSE_mod2 = NSE_mod2,
d_mod2 = d_mod2,
RMSE_mod2 = RMSE_mod2,
MAE_mod2 = MAE_mod2
)
}
# Compute GOF metrics for each Sim.Type and CPNM
mod2_summary <- comparison_df %>%
group_by(Sim.Type, CPNM) %>%
group_modify(~ compute_mod2_stats(.x)) %>%
ungroup()
compute_mod2_stats <- function(df) {
# Ensure required columns exist
required_cols <- c("observed", "simulated", "uncertainty")
if (!all(required_cols %in% names(df))) {
stop("Data frame must include 'observed', 'simulated', and 'uncertainty' columns.")
}
# Calculate CF based on pnorm (transformed predicted value)
prob <- pnorm(df$simulated, mean = df$observed, sd = df$uncertainty)
prob_adj <- ifelse(prob > 0.5, 1 - prob, prob)
CF <- 1 - 2 * prob_adj
# Calculate directional error using Modification 2
eu2i <- (CF / 0.5) * (df$observed - df$simulated)
# Goodness-of-fit indicators
NSE_mod2 <- 1 - sum(eu2i^2) / sum((df$observed - mean(df$observed))^2)
d_mod2 <- 1 - sum(eu2i^2) / sum((abs(df$simulated - mean(df$observed)) +
abs(df$observed - mean(df$observed)))^2)
RMSE_mod2 <- sqrt(mean(eu2i^2))
MAE_mod2 <- mean(abs(eu2i))
# Output
return(data.frame(
NSE_mod2 = NSE_mod2,
d_mod2 = d_mod2,
RMSE_mod2 = RMSE_mod2,
MAE_mod2 = MAE_mod2
))
}
# Compute GOF metrics for each Sim.Type and CPNM
mod2_summary <- comparison_df %>%
group_by(Sim.Type, CPNM) %>%
group_modify(~ compute_mod2_stats(.x)) %>%
ungroup()
# Print results
print(mod2_summary)
compute_mod2_stats <- function(df) {
prob <- pnorm(df$simulated, mean = df$observed, sd = df$uncertainty)
prob_adj <- ifelse(prob > 0.5, 1 - prob, prob)
CF <- 1 - 2 * prob_adj
eu2i <- (CF/0.5) * (df$observed - df$simulated)
NSE_mod2 <- 1 - sum(eu2i^2) / sum((df$observed - mean(df$observed))^2)
d_mod2 <- 1 - sum(eu2i^2) / sum((abs(df$simulated - mean(df$observed)) +
abs(df$observed - mean(df$observed)))^2)
RMSE_mod2 <- sqrt(mean(eu2i^2))
MAE_mod2 <- mean(abs(eu2i))
data.frame(
NSE_mod2 = NSE_mod2,
d_mod2 = d_mod2,
RMSE_mod2 = RMSE_mod2,
MAE_mod2 = MAE_mod2
)
}
# Compute GOF metrics for each Sim.Type and CPNM
mod2_summary <- comparison_df %>%
group_by(Sim.Type, CPNM) %>%
group_modify(~ compute_mod2_stats(.x)) %>%
ungroup()
# Print results
print(mod2_summary)
glimpse(comparison_df)
View(comparison_df)
# Reordering columns for excel export
excel_export <- comparison_df %>%
select(Y, Treatment, Pasture, CPNM, Sim.Type,
observed, uncertainty, simulated)
View(excel_export)
getwd()
# Export for Harmel Excel workbook
write.csv(excel_export, "cageBiomass_comparisons_2014-2018.csv")
# Reordering columns for excel export
excel_export <- comparison_df %>%
select(Y, Treatment, Pasture, CPNM, Sim.Type,
observed, uncertainty, simulated) %>%
mutate(simulated = round(simulated, 2))
# Export for Harmel Excel workbook
write.csv(excel_export, "cageBiomass_comparisons_2014-2018.csv")
summary(mod_biomass)
# Display combined plot
combined_plot
debugSource("~/GitHub/APEX_spatial-temp-var/1605 biomass/cag_biomass_accumulated.R", echo = TRUE)
source("~/GitHub/APEX_spatial-temp-var/1605 biomass/cag_biomass_accumulated.R", echo = TRUE)
# Pair-wise contrasts
emm_biomass <- emmeans(mod_biomass, ~ Sim.Type | CPNM)
# Post-hoc analysis of pair-wise contrasts
pairs(emm_biomass, adjust = "tukey", reverse = TRUE)
ggplot(emm_biomass_df, aes(x = CPNM, y = emmean, fill = Sim.Type)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL),
position = position_dodge(width = 0.8),
width = 0.2) +
labs(
title = "Estimated Marginal Means of Biomass by Species and Simulation Type",
x = "Species (CPNM)",
y = "Estimated Biomass (kg/ha)",
fill = "Simulation Type"
) +
theme_minimal(base_size = 14)
# Post-hoc analysis of pair-wise contrasts
pairs(emm_biomass, adjust = "tukey", reverse = TRUE)
# Post-hoc analysis of pair-wise contrasts
pairs(emm_biomass, reverse = TRUE)
?pairs
emmip(mod_biomass, ~ Sim.Type | CPNM)
emmip(mod_biomass, ~ Sim.Type *CPNM)
emmip(mod_biomass, ~ Sim.Type | CPNM)
# Load libraries
library(tidyverse)
library(data.table)
library(lubridate)
library(patchwork)
library(emmeans)
library(ggsci)
####### PANEL A: Monthly Precipitation #######
# Set column names
column_names <- c("year", "month", "day", "Srad", "Tmax", "Tmin", "rain_mm", "RH", "windspd", "Date")
# Read the daily weather data
weather_data <- read.csv("C:/Users/Sean.DiStefano/Documents/GitHub/APEX_spatial-temp-var/CPER_climate data.csv") %>%
filter(year %in% c(2014:2018),
month %in% c(5:10)
) %>%
mutate(Date = ymd(paste(year,month,day, sep = "-")))
# Assigning new column names
colnames(weather_data) <- column_names
# Monthly precipitation
monthly_precip <- weather_data %>%
group_by(year, month) %>%
summarize(total_rain = sum(rain_mm, na.rm = TRUE), .groups = "drop") %>%
mutate(month_name = factor(month, levels = 1:12, labels = month.abb))
# Annual precipitation totals
annual_precip <- weather_data %>%
group_by(year) %>%
summarize(yearly_rain = sum(rain_mm, na.rm = TRUE))
# Create label positions
annual_precip <- annual_precip %>%
mutate(Date = as.Date(paste0(year, "-10-15")))  # e.g., place label in mid October
# Plot Panel A
plot_precip <- ggplot(weather_data, aes(x = Date, y = rain_mm)) +
geom_bar(stat = "identity", fill = "skyblue3") +
facet_wrap(~ year, ncol = 1, scales = "free_x") +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
labs(x = "Month", y = "Daily Precipitation (mm)") +
geom_text(data = annual_precip,
aes(x = Date, y = Inf, label = paste0("Total: ", round(yearly_rain, 0), " mm")),
vjust = 1.2, family = "serif", size = 4, inherit.aes = FALSE) +
theme_minimal() +
theme(strip.text = element_text(size = 12, face = "bold", family = "serif"),
axis.text.x = element_text(angle = 45, hjust = 1, family = "serif", size = 12),
axis.text.y = element_text(family = "serif", size = 12),
axis.title = element_text(family = "serif", size = 14))
####### PANEL B: Monthly Tmax and Tmin #######
# Plot Panel B
plot_temp <- ggplot(weather_data, aes(x = Date)) +
geom_line(aes(y = Tmax, color = "Max Temp"), linewidth = 1.2) +
geom_line(aes(y = Tmin, color = "Min Temp"), linewidth = 1.2) +
facet_wrap(~ year, ncol = 1, scales = "free_x") +
scale_color_manual(values = c("Max Temp" = "#D55E00", "Min Temp" = "#0072B2")) +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
labs(x = "Month", y = "Air Temperature (°C)", color = "Daily Temperature") +
theme_minimal() +
theme(strip.text = element_text(size = 12, face = "bold", family = "serif"),
axis.text.x = element_text(angle = 45, hjust = 1, family = "serif", size = 12),
axis.text.y = element_text(family = "serif", size = 12),
axis.title = element_text(family = "serif", size = 14),
legend.text = element_text(family = "serif", size = 12),
legend.title = element_text(family = "serif", size = 14),
legend.position = "bottom")
####### PANEL C & D: Plant Stress (by CPNM) #######
# Function to read and preprocess plant stress
read_preprocess_stress <- function(file_path, metadata_path, skip_lines = 9, years = 2014:2018) {
plantStress_data <- fread(file_path, fill = TRUE, skip = skip_lines, header = TRUE) %>%
select(ID, Y, M, D, CPNM, WS, TS) %>%
filter(Y %in% years) %>%
mutate(Date = ymd(paste(Y, M, D, sep = "-")),
ID = as.integer(ID))
metadata <- read.csv(metadata_path)
left_join(plantStress_data, metadata, by = "ID")
}
# Summarization function (corrected to handle dates)
summarize_stress_cpnm <- function(data, stress_var) {
data %>%
mutate(month_day = as.Date(format(Date, "2000-%m-%d"))) %>%  # use dummy year for plotting
group_by(Date, Pasture, CPNM, Y, month_day) %>%
summarize(stress_pasturePlant = mean(.data[[stress_var]], na.rm = TRUE), .groups = "drop") %>%
group_by(Date, Y, CPNM, month_day) %>%
summarize(cpnm_stress_daily = round(mean(stress_pasturePlant ), 2),
sd_cpnm_stress_daily = round(sd(stress_pasturePlant ), 2), .groups = "drop")
}
# Read data (spatial & no variability)
spatial <- read_preprocess_stress(
file_path = "C:/Users/Sean.DiStefano/Downloads/APEX1605_NEW/APEX1605_CO_all92/CONUNN_TGM.cag",
metadata_path = "C:/APEX data and scripts/Data/PastureID_ecosite_92subareas.csv"
)
no_variability <- read_preprocess_stress(
file_path = "C:/Users/Sean.DiStefano/Downloads/APEX1605_NEW/APEX1605_CO_all20/CONUNN_TGM.cag",
metadata_path = "C:/APEX data and scripts/Data/PastureID_ecosite_20subareas.csv"
)
# Summarize both stress types
spatial_WS_CPNM <- summarize_stress_cpnm(spatial, "WS") %>% mutate(Sim.Type = "Spatial Variability")
noVar_WS_CPNM <- summarize_stress_cpnm(no_variability, "WS") %>% mutate(Sim.Type = "No Variability")
combined_WS_CPNM <- bind_rows(spatial_WS_CPNM, noVar_WS_CPNM) %>%
filter(month_day >= as.Date("2000-05-01") & month_day <= as.Date("2000-10-31"))
spatial_TS_CPNM <- summarize_stress_cpnm(spatial, "TS") %>% mutate(Sim.Type = "Spatial Variability")
noVar_TS_CPNM <- summarize_stress_cpnm(no_variability, "TS") %>% mutate(Sim.Type = "No Variability")
combined_TS_CPNM <- bind_rows(spatial_TS_CPNM, noVar_TS_CPNM) %>%
filter(month_day >= as.Date("2000-05-01") & month_day <= as.Date("2000-10-31"))
model_ws <- lm(cpnm_stress_daily ~ Sim.Type * CPNM + Y, data = combined_WS_CPNM)
# model_ts <- lm(cpnm_stress_daily ~ Sim.Type * CPNM + Y, data = combined_TS_CPNM)
summary(model_ws)
summary(model_ts)
model_ts <- lm(cpnm_stress_daily ~ Sim.Type * CPNM + Y, data = combined_TS_CPNM)
# Get estimated marginal means from each model
emm_ws <- emmeans(model_ws, ~ Sim.Type | CPNM) %>%
as.data.frame() %>%
mutate(StressType = "Water Stress")
# Post-hoc analysis of pair-wise contrasts
pairs(emm_ws, adjust = "tukey", reverse = TRUE)
# Get estimated marginal means from each model
emm_ws <- emmeans(model_ws, ~ Sim.Type | CPNM) %>%
as.data.frame() %>%
mutate(StressType = "Water Stress")
# Post-hoc analysis of pair-wise contrasts
pairs(emm_ws, adjust = "tukey", reverse = TRUE)
# Pair-wise contrasts
emm_biomass <- emmeans(mod_biomass, ~ Sim.Type | CPNM)
# Pair-wise contrasts
emm_biomass <- emmeans(mod_biomass, ~ Sim.Type | CPNM)
# Post-hoc analysis of pair-wise contrasts
pairs(emm_biomass, adjust = "tukey", reverse = TRUE)
# Get estimated marginal means from each model
emm_ws_analyze <- emmeans(model_ws, ~ Sim.Type | CPNM)
emm_ws <- emm_ws_analyze %>%
as.data.frame() %>%
mutate(StressType = "Water Stress")
# Get estimated marginal means from each model
emm_ws <- emmeans(model_ws, ~ Sim.Type | CPNM)
emm_ws_df <- emm_ws %>%
as.data.frame() %>%
mutate(StressType = "Water Stress")
# Get estimated marginal means from each model
emm_ws <- emmeans(model_ws, ~ Sim.Type | CPNM)
emm_ws_df <- emm_ws %>%
as.data.frame() %>%
mutate(StressType = "Water Stress")
# Post-hoc analysis of pair-wise contrasts
pairs(emm_ws, adjust = "tukey", reverse = TRUE)
emm_ts <- emmeans(model_ts, ~ Sim.Type | CPNM)
emm_ts_df <- emm_ts %>%
as.data.frame() %>%
mutate(StressType = "Temperature Stress")
# Post-hoc analysis of pair-wise contrasts
pairs(emm_ts, adjust = "tukey", reverse = TRUE)
# Post-hoc analysis of pair-wise contrasts
pairs(emm_biomass, adjust = "tukey", reverse = TRUE)
